import{createRandomStringGenerator as Ft}from"@better-auth/utils/random";var N=Ft("a-z","0-9","A-Z","-_");import{z as Ee}from"zod";import{createEndpointCreator as Vt,createMiddleware as $e,createMiddlewareCreator as Mt}from"better-call";var Fe=$e(async()=>({})),M=Mt({use:[Fe,$e(async()=>({}))]}),m=Vt({use:[Fe]});import{APIError as sd,createRouter as id,getCookie as ad,getSignedCookie as cd,setCookie as dd,setSignedCookie as ud}from"better-call";import{APIError as Gt}from"better-call";function _e(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function qt(e){let t="";for(let r=0;r<e.length;r++)t+=_e(e[r]);return t}function Ve(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${Ve(u,t)}$`).join("|")})`;let r="",o="",s=".";t===!0?(r="/",o="[/\\\\]",s="[^/\\\\]"):t&&(r=t,o=qt(r),o.length>1?(o=`(?:${o})`,s=`((?!${o}).)`):s=`[^${o}]`);let n=t?`${o}+?`:"",i=t?`${o}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let u=c[d],p=c[d+1],l="";if(!(!u&&d>0)){if(t&&(d===c.length-1?l=i:p!=="**"?l=n:l=""),t&&u==="**"){l&&(a+=d===0?"":l,a+=`(?:${s}*?${l})*?`);continue}for(let h=0;h<u.length;h++){let b=u[h];b==="\\"?h<u.length-1&&(a+=_e(u[h+1]),h++):b==="?"?a+=s:b==="*"?a+=`${s}*?`:a+=_e(b)}a+=l}}return a}function zt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Ue(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ve(e,t.separator),o=new RegExp(`^${r}$`,t.flags),s=zt.bind(null,o);return s.options=t,s.pattern=e,s.regexp=o,s}var ge=Object.create(null),ne=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ge:globalThis),Me=new Proxy(ge,{get(e,t){return ne()[t]??ge[t]},has(e,t){let r=ne();return t in r||t in ge},set(e,t,r){let o=ne(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ne(!0);return delete r[t],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function Ht(e){return e?e!=="false":!1}var Oe=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Se=Oe==="dev"||Oe==="development",Wt=Oe==="test"||Ht(Me.TEST);var Q=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function qe(e){try{return new URL(e).origin}catch{return null}}function ze(e){return e.includes("://")?new URL(e).host:e}var Qt=M(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,s=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,i=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,u=o.trustedOrigins,p=e.headers?.has("cookie"),l=(b,S)=>b.startsWith("/")?!1:S.includes("*")?Ue(S)(ze(b)):b.startsWith(S),h=(b,S)=>{if(!b)return;if(!u.some(re=>l(b,re)||b?.startsWith("/")&&S!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${S}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new Gt("FORBIDDEN",{message:`Invalid ${S}`})};p&&!e.context.options.advanced?.disableCSRFCheck&&h(s,"origin"),n&&h(n,"callbackURL"),i&&h(i,"redirectURL"),c&&h(c,"currentURL"),a&&h(a,"errorCallbackURL"),d&&h(i,"newUserCallbackURL")});import{APIError as P}from"better-call";import{z as k}from"zod";var K=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{base64Url as Kt}from"@better-auth/utils/base64";import{createHMAC as Zt}from"@better-auth/utils/hmac";async function ve(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Kt.encode(JSON.stringify({session:t,expiresAt:K(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await Zt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new Q("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function E(e,t,r,o){let s=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...s,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await ve(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function C(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var Jt=Object.defineProperty,Yt=Object.defineProperties,Xt=Object.getOwnPropertyDescriptors,He=Object.getOwnPropertySymbols,er=Object.prototype.hasOwnProperty,tr=Object.prototype.propertyIsEnumerable,We=(e,t,r)=>t in e?Jt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Z=(e,t)=>{for(var r in t||(t={}))er.call(t,r)&&We(e,r,t[r]);if(He)for(var r of He(t))tr.call(t,r)&&We(e,r,t[r]);return e},J=(e,t)=>Yt(e,Xt(t)),rr=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},or=async(e,t)=>{var r,o,s,n,i,c;let a=t||{},d={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:d};for(let u of t?.plugins||[]){if(u.init){let p=await((r=u.init)==null?void 0:r.call(u,e.toString(),t));a=p.options||a,e=p.url}d.onRequest.push((o=u.hooks)==null?void 0:o.onRequest),d.onResponse.push((s=u.hooks)==null?void 0:s.onResponse),d.onSuccess.push((n=u.hooks)==null?void 0:n.onSuccess),d.onError.push((i=u.hooks)==null?void 0:i.onError),d.onRetry.push((c=u.hooks)==null?void 0:c.onRetry)}return{url:e,options:a,hooks:d}},Ge=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},nr=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function sr(e){if(typeof e=="number")return new Ge({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Ge(e);case"exponential":return new nr(e);default:throw new Error("Invalid retry strategy")}}var ir=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),s=r(e.auth.password);if(!o||!s)return t;t.authorization=`Basic ${btoa(`${o}:${s}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},Ze=["get","post","put","patch","delete"];var ar=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function cr(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return ar.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function dr(e){try{return JSON.parse(e),!0}catch{return!1}}function Je(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function Qe(e){try{return JSON.parse(e)}catch{return e}}function Ke(e){return typeof e=="function"}function ur(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&Ke(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&Ke(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function lr(e){let t=new Headers(e?.headers),r=ir(e);for(let[o,s]of Object.entries(r||{}))t.set(o,s);if(!t.has("content-type")){let o=pr(e?.body);o&&t.set("content-type",o)}return t}function pr(e){return Je(e)?"application/json":null}function mr(e){if(!e?.body)return null;let t=new Headers(e?.headers);return Je(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function fr(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return Ze.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function gr(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function hr(e,t){let{baseURL:r,params:o,query:s}=t||{query:{},params:{},baseURL:""},n=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!n)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let p=e.toString().split("@")[1].split("/")[0];Ze.includes(p)&&(e=e.replace(`@${p}/`,"/"))}n.endsWith("/")||(n+="/");let[i,c]=e.replace(n,"").split("?"),a=new URLSearchParams(c);for(let[p,l]of Object.entries(s||{}))a.set(p,String(l));if(o)if(Array.isArray(o)){let p=i.split("/").filter(l=>l.startsWith(":"));for(let[l,h]of p.entries()){let b=o[l];i=i.replace(h,b)}}else for(let[p,l]of Object.entries(o))i=i.replace(`:${p}`,String(l));i=i.split("/").map(encodeURIComponent).join("/"),i.startsWith("/")&&(i=i.slice(1));let d=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${i}${d}`,n)}var w=async(e,t)=>{var r,o,s,n,i,c,a,d;let{hooks:u,url:p,options:l}=await or(e,t),h=ur(l),b=new AbortController,S=(r=l.signal)!=null?r:b.signal,fe=hr(p,l),re=mr(l),oe=lr(l),I=fr(p,l),y=J(Z({},l),{url:fe,headers:oe,body:re,method:I,signal:S});for(let L of u.onRequest)if(L){let v=await L(y);v instanceof Object&&(y=v)}("pipeTo"in y&&typeof y.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in y||(y.duplex="half"));let{clearTimeout:Ne}=gr(l,b),T=await h(y.url,y);Ne();let je={response:T,request:y};for(let L of u.onResponse)if(L){let v=await L(J(Z({},je),{response:(s=t?.hookOptions)!=null&&s.cloneResponse?T.clone():T}));v instanceof Response?T=v:v instanceof Object&&(T=v.response)}if(T.ok){if(!(y.method!=="HEAD"))return{data:"",error:null};let v=cr(T),F={data:"",response:T,request:y};if(v==="json"||v==="text"){let V=await T.text(),$t=await((n=y.jsonParser)!=null?n:Qe)(V);F.data=$t}else F.data=await T[v]();y?.output&&y.output&&!y.disableValidation&&(F.data=y.output.parse(F.data));for(let V of u.onSuccess)V&&await V(J(Z({},F),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?T.clone():T}));return t?.throw?F.data:{data:F.data,error:null}}let jt=(c=t?.jsonParser)!=null?c:Qe,Be=await T.text(),ke=dr(Be)?await jt(Be):{},Bt={response:T,request:y,error:J(Z({},ke),{status:T.status,statusText:T.statusText})};for(let L of u.onError)L&&await L(J(Z({},Bt),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?T.clone():T}));if(t?.retry){let L=sr(t.retry),v=(d=t.retryAttempt)!=null?d:0;if(await L.shouldAttemptRetry(v,T)){for(let V of u.onRetry)V&&await V(je);let F=L.getDelay(v);return await new Promise(V=>setTimeout(V,F)),await w(e,J(Z({},t),{retryAttempt:v+1}))}}if(t?.throw)throw new rr(T.status,T.statusText,ke);return{data:null,error:J(Z({},ke),{status:T.status,statusText:T.statusText})}};import{APIError as kr}from"better-call";import{decodeJwt as _r,decodeProtectedHeader as Ur,importJWK as Or,jwtVerify as Sr}from"jose";import{createHash as wr}from"@better-auth/utils/hash";import{base64Url as yr}from"@better-auth/utils/base64";async function Ye(e){let t=await wr("SHA-256").digest(e);return yr.encode(new Uint8Array(t),{padding:!1})}function he(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?K(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:s,scopes:n,claims:i,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",n.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),s){let u=await Ye(s);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",u)}if(i){let u=i.reduce((p,l)=>(p[l]=null,p),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return a&&d.searchParams.set("duration",a),d}import{jwtVerify as pn}from"jose";async function A({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:s,authentication:n}){let i=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(i.set("grant_type","authorization_code"),i.set("code",e),t&&i.set("code_verifier",t),i.set("redirect_uri",r),n==="basic"){let p=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${p}`}else i.set("client_id",o.clientId),i.set("client_secret",o.clientSecret);let{data:a,error:d}=await w(s,{method:"POST",body:i,headers:c});if(d)throw d;return he(a)}import{z as q}from"zod";import{APIError as ot}from"better-call";import{createHash as et}from"@better-auth/utils/hash";import{xchacha20poly1305 as tt}from"@noble/ciphers/chacha";import{bytesToHex as Tr,hexToBytes as Rr,utf8ToBytes as Er}from"@noble/ciphers/utils";import{managedNonce as rt}from"@noble/ciphers/webcrypto";import{createHash as wn}from"@better-auth/utils/hash";import{SignJWT as Ar}from"jose";async function Xe(e,t,r=3600){return await new Ar(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}import{scryptAsync as En}from"@noble/hashes/scrypt";import{getRandomValues as _n}from"uncrypto";import{hex as On}from"@better-auth/utils/hex";var se=async({key:e,data:t})=>{let r=await et("SHA-256").digest(e),o=Er(t),s=rt(tt)(new Uint8Array(r));return Tr(s.encrypt(o))},ie=async({key:e,data:t})=>{let r=await et("SHA-256").digest(e),o=Rr(t),s=rt(tt)(new Uint8Array(r));return new TextDecoder().decode(s.decrypt(o))};async function we(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?qe(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ot("BAD_REQUEST",{message:"callbackURL is required"});let o=N(128),s=N(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),i=new Date;i.setMinutes(i.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:s,expiresAt:i});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ot("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function nt(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=q.object({callbackURL:q.string(),codeVerifier:q.string(),errorURL:q.string().optional(),newUserURL:q.string().optional(),expiresAt:q.number(),link:q.object({email:q.string(),userId:q.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var st=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:s}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||s}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:s})=>A({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let s=Ur(r),{kid:n,alg:i}=s;if(!n||!i)return!1;let c=await vr(n),{payload:a}=await Sr(r,c,{algorithms:[i],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=_r(r.idToken);if(!o)return null;let s=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:s,emailVerified:!1,email:o.email,...n},data:o}}}},vr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await w(`${t}${r}`);if(!o?.keys)throw new kr("BAD_REQUEST",{message:"Keys not found"});let s=o.keys.find(n=>n.kid===e);if(!s)throw new Error(`JWK with kid ${e} not found`);return await Or(s,s.alg)};var it=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identify","email"];return e.scope&&s.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${s.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...s},data:r}}});var at=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["email","public_profile"];return e.scope&&s.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:s,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...s},data:r}}});var ct=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:s,redirectURI:n}){let i=o||["user:email"];return e.scope&&i.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:i,state:r,redirectURI:n})},validateAuthorizationCode:async({code:r,redirectURI:o})=>A({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await w("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(s)return null;let n=!1,{data:i}=await w("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});i&&(o.email=(i.find(a=>a.primary)??i[0])?.email,n=i.find(a=>a.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...c},data:o}}}};var Pe=["info","success","warn","error","debug"];function Pr(e,t){return Pe.indexOf(t)<=Pe.indexOf(e)}var $={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Ir={info:$.fg.blue,success:$.fg.green,warn:$.fg.yellow,error:$.fg.red,debug:$.fg.magenta},xr=(e,t)=>{let r=new Date().toISOString();return`${$.dim}${r}${$.reset} ${Ir[e]}${e.toUpperCase()}${$.reset} ${$.bright}[Better Auth]:${$.reset} ${t}`},Lr=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(s,n,i=[])=>{if(!t||!Pr(r,s))return;let c=xr(s,n);if(!e||typeof e.log!="function"){s==="error"?console.error(c,...i):s==="warn"?console.warn(c,...i):console.log(c,...i);return}e.log(s==="success"?"info":s,c,...i)};return Object.fromEntries(Pe.map(s=>[s,(...[n,...i])=>o(s,n,i)]))},j=Lr();import{decodeJwt as Cr}from"jose";var dt=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){if(!e.clientId||!e.clientSecret)throw j.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new Q("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new Q("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let i=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:s});return e.accessType&&i.searchParams.set("access_type",e.accessType),e.prompt&&i.searchParams.set("prompt",e.prompt),i},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:s}=await w(o);return s?s.aud===e.clientId&&s.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Cr(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});import{decodeJwt as Dr}from"jose";var ut=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(s){let n=s.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:s.state,codeVerifier:s.codeVerifier,scopes:n,redirectURI:s.redirectURI})},validateAuthorizationCode({code:s,codeVerifier:n,redirectURI:i}){return A({code:s,codeVerifier:n,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:o})},async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);if(!s.idToken)return null;let n=Dr(s.idToken),i=e.profilePhotoSize||48;await w(`https://graph.microsoft.com/v1.0/me/photos/${i}x${i}/$value`,{headers:{Authorization:`Bearer ${s.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let u=await a.response.clone().arrayBuffer(),p=Buffer.from(u).toString("base64");n.picture=`data:image/jpeg;base64, ${p}`}catch(d){j.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}};var lt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:s})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...s},data:r}}});var ee={isAction:!1};import{createRandomStringGenerator as Nr}from"@better-auth/utils/random";var pt=e=>Nr("a-z","A-Z","0-9")(e||32);import{decodeJwt as jr}from"jose";var mt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["user:read:email","openid"];return e.scope&&s.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:s,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return j.error("No idToken found in token"),null;let o=jr(r),s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...s},data:o}}});var ft=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...s},data:r}}});var gt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:s,redirectURI:n})=>{let i=o||["account_info.read"];return e.scope&&i.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:i,state:r,redirectURI:n,codeVerifier:s})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:s})=>await A({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await w("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(s)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}};var ht=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:s,redirectURI:n})=>{let i=s||["profile","email","openid"];return e.scope&&i.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:i,state:o,redirectURI:n})},validateAuthorizationCode:async({code:o,redirectURI:s})=>await A({code:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:s,error:n}=await w("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,emailVerified:s.email_verified||!1,image:s.picture,...i},data:s}}}};var Ie=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Br=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Ie(`${t}/oauth/authorize`),tokenEndpoint:Ie(`${t}/oauth/token`),userinfoEndpoint:Ie(`${t}/api/v4/user`)}},wt=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Br(e.issuer),s="gitlab";return{id:s,name:"Gitlab",createAuthorizationURL:async({state:i,scopes:c,codeVerifier:a,redirectURI:d})=>{let u=c||["read_user"];return e.scope&&u.push(...e.scope),await R({id:s,options:e,authorizationEndpoint:t,scopes:u,state:i,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:i,redirectURI:c,codeVerifier:a})=>A({code:i,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);let{data:c,error:a}=await w(o,{headers:{authorization:`Bearer ${i.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var yt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identity"];return e.scope&&s.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:s,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),s={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:i}=await w("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:s,body:o.toString()});if(i)throw i;return he(n)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...s},data:r}}});var bt=e=>({id:"roblox",name:"Roblox",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["openid","profile"];return e.scope&&s.push(...e.scope),new URL(`https://apis.roblox.com/oauth/v1/authorize?scope=${s.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"select_account+consent"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://apis.roblox.com/oauth/v1/token",authentication:"post"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await w("https://apis.roblox.com/oauth/v1/userinfo",{headers:{authorization:`Bearer ${t.accessToken}`}});return o?null:{user:{id:r.sub,name:r.nickname||r.preferred_username||"",image:r.picture,email:"",emailVerified:!0},data:{...r}}}});import{z as $r}from"zod";var Fr={apple:st,discord:it,facebook:at,github:ct,microsoft:ut,google:dt,spotify:lt,twitch:mt,twitter:ft,dropbox:gt,linkedin:ht,gitlab:wt,reddit:yt,roblox:bt},xe=Object.keys(Fr),At=$r.enum(xe,{description:"OAuth2 provider to use"});import{z as B}from"zod";import{APIError as ae}from"better-call";import{APIError as z}from"better-call";import{z as Y}from"zod";function Tt(e){try{return JSON.parse(e)}catch{return null}}var f={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Vr}from"@better-auth/utils/hmac";import{base64 as Mr}from"@better-auth/utils/base64";import{binary as qr}from"@better-auth/utils/binary";var Rt=()=>m("/get-session",{method:"GET",query:Y.optional(Y.object({disableCookieCache:Y.boolean({description:"Disable cookie cache and fetch session from database"}).or(Y.string().transform(e=>e==="true")).optional(),disableRefresh:Y.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Tt(qr.decode(Mr.decode(r))):null;if(o&&!await Vr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return C(e),e.json(null);let s=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let l=e.context.authCookies.sessionData.name;e.setCookie(l,"",{maxAge:0})}else return e.json(u)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return C(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(s||e.query?.disableRefresh)return e.json(n);let i=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-i*1e3+c*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:K(e.context.sessionConfig.expiresIn,"sec")});if(!u)return C(e),e.json(null,{status:401});let p=(u.expiresAt.valueOf()-Date.now())/1e3;return await E(e,{session:u,user:n.user},!1,{maxAge:p}),e.json({session:u,user:n.user})}return await ve(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new z("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION})}}),H=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Rt()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},U=M(async e=>{let t=await H(e);if(!t?.session)throw new z("UNAUTHORIZED");return{session:t}}),Gi=M(async e=>{let t=await H(e);if(!t?.session)throw new z("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new z("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var zr=m("/revoke-session",{method:"POST",body:Y.object({token:Y.string({description:"The token to revoke"})}),use:[U],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new z("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new z("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new z("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Hr=m("/revoke-sessions",{method:"POST",use:[U],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new z("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Wr=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[U],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new z("UNAUTHORIZED");let s=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(s.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as Gr}from"jose";async function W(e,t,r){return await Xe({email:t.toLowerCase(),updateTo:r},e)}async function Qr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ae("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await W(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var Kr=m("/send-verification-email",{method:"POST",query:B.object({currentURL:B.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:B.object({email:B.string({description:"The email to send the verification email to"}).email(),callbackURL:B.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ae("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ae("BAD_REQUEST",{message:f.USER_NOT_FOUND});return await Qr(e,r.user),e.json({status:!0})}),Zr=m("/verify-email",{method:"GET",query:B.object({token:B.string({description:"The token to verify the email"}),callbackURL:B.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new ae("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await Gr(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=B.object({email:B.string().email(),updateTo:B.string().optional()}).parse(o.payload),i=await e.context.internalAdapter.findUserByEmail(n.email);if(!i)return t("user_not_found");if(n.updateTo){let c=await H(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),d=await W(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let c=await H(e);if(!c||c.user.email!==n.email){let a=await e.context.internalAdapter.createSession(i.user.id,e.request);if(!a)throw new ae("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await E(e,{session:a,user:i.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ye(e,{userInfo:t,account:r,callbackURL:o}){let s=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw j.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=s?.user,i=!n;if(s){let a=s.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,p])=>p!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Se&&j.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:s.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(p){return j.error("Unable to link account",p),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let a=await W(e.context.secret,n.email),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:d,token:a},e.request)}}catch(a){return a instanceof Et?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};if(n?.banned)return{error:`user is banned&reason=${n.banReason}`,data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:i}:{error:"unable to create session",data:null,isRegister:!1}}var Jr=m("/sign-in/social",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({callbackURL:k.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.string().optional(),errorCallbackURL:k.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:At,disableRedirect:k.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.optional(k.object({token:k.string({description:"ID token from the provider"}),nonce:k.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.string({description:"Access token from the provider"}).optional(),refreshToken:k.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new P("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new P("NOT_FOUND",{message:f.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:i}=e.body.idToken;if(!await t.verifyIdToken(n,i))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new P("UNAUTHORIZED",{message:f.INVALID_TOKEN});let a=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new P("UNAUTHORIZED",{message:f.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new P("UNAUTHORIZED",{message:f.USER_EMAIL_NOT_FOUND});let d=await ye(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new P("UNAUTHORIZED",{message:d.error});return await E(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await we(e),s=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:s.toString(),redirect:!e.body.disableRedirect})}),Yr=m("/sign-in/email",{method:"POST",body:k.object({email:k.string({description:"Email of the user"}),password:k.string({description:"Password of the user"}),callbackURL:k.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new P("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!k.string().email().safeParse(t).success)throw new P("BAD_REQUEST",{message:f.INVALID_EMAIL});let s=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!s)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new P("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let n=s.accounts.find(d=>d.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new P("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let i=n?.password;if(!i)throw e.context.logger.error("Password not found",{email:t}),new P("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:i,password:r}))throw e.context.logger.error("Invalid password"),new P("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!s.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new P("UNAUTHORIZED",{message:f.EMAIL_NOT_VERIFIED});let d=await W(e.context.secret,s.user.email),u=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:s.user,url:u,token:d},e.request),new P("FORBIDDEN",{message:f.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(s.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new P("UNAUTHORIZED",{message:f.FAILED_TO_CREATE_SESSION});return await E(e,{session:a,user:s.user},e.body.rememberMe===!1),e.json({user:{id:s.user.id,email:s.user.email,name:s.user.name,image:s.user.image,emailVerified:s.user.emailVerified,createdAt:s.user.createdAt,updatedAt:s.user.updatedAt},token:a.token,redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as ce}from"zod";var be=ce.object({code:ce.string().optional(),error:ce.string().optional(),error_description:ce.string().optional(),state:ce.string().optional()}),Xr=m("/callback/:id",{method:["GET","POST"],body:be.optional(),query:be.optional(),metadata:ee},async e=>{let t;try{if(e.method==="GET")t=be.parse(e.query);else if(e.method==="POST")t=be.parse(e.body);else throw new Error("Unsupported method")}catch(I){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",I),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:s,error_description:n}=t;if(!s)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let i=e.context.socialProviders.find(I=>I.id===e.params.id);if(!i)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:u,newUserURL:p}=await nt(e),l;try{l=await i.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${i.id}`})}catch(I){throw e.context.logger.error("",I),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await i.getUserInfo(l).then(I=>I?.user);function b(I){let y=u||a||`${e.context.baseURL}/error`;throw y.includes("?")?y=`${y}&error=${I}`:y=`${y}?error=${I}`,e.redirect(y)}if(!h)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!h.email&&i.id!=="roblox")return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==h?.email?.toLowerCase()&&i.id!=="roblox")return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:i.id,accountId:h.id,name:h.name||h.email||"",accessToken:l.accessToken,refreshToken:l.refreshToken,accessTokenExpiresAt:l.accessTokenExpiresAt,scope:l.scopes?.join(","),image:h.image}))return b("unable_to_link_account");let y;try{y=a.toString()}catch{y=a}throw e.redirect(y)}let S=await ye(e,{userInfo:{...h,email:h.email||"",name:h.name||h.email||""},account:{providerId:i.id,accountId:h.id,...l,image:h.image,scope:l.scopes?.join(",")},callbackURL:a});if(S.error)return e.context.logger.error(S.error.split(" ").join("_")),b(S.error.split(" ").join("_"));let{session:fe,user:re}=S.data;await E(e,{session:fe,user:re});let oe;try{oe=(S.isRegister&&p||a).toString()}catch{oe=S.isRegister&&p||a}throw e.redirect(oe)});import"zod";import{APIError as eo}from"better-call";var to=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw C(e),new eo("BAD_REQUEST",{message:f.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),C(e),e.json({success:!0})});import{z as D}from"zod";import{APIError as de}from"better-call";function kt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([s,n])=>o.searchParams.set(s,n)),o.href}function ro(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([s,n])=>o.searchParams.set(s,n)),o.href}var oo=m("/forget-password",{method:"POST",body:D.object({email:D.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:D.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new de("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let s=60*60*1,n=K(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||s,"sec"),i=pt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${i}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${i}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:i},e.request),e.json({status:!0})}),no=m("/reset-password/:token",{method:"GET",query:D.object({callbackURL:D.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(kt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(kt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(ro(e.context,r,{token:t}))}),so=m("/reset-password",{query:D.optional(D.object({token:D.string().optional(),currentURL:D.string().optional()})),method:"POST",body:D.object({newPassword:D.string({description:"The new password to set"}),token:D.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new de("BAD_REQUEST",{message:f.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,s=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new de("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});if(r.length>s)throw new de("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,i=await e.context.internalAdapter.findVerificationValue(n);if(!i||i.expiresAt<new Date)throw new de("BAD_REQUEST",{message:f.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(i.id);let c=i.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(p=>p.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});import{z as O}from"zod";import{APIError as _}from"better-call";import{z as g}from"zod";import{APIError as Va}from"better-call";var Ma=g.object({id:g.string(),providerId:g.string(),accountId:g.string(),name:g.string().nullish(),userId:g.string(),accessToken:g.string().nullish(),refreshToken:g.string().nullish(),idToken:g.string().nullish(),accessTokenExpiresAt:g.date().nullish(),refreshTokenExpiresAt:g.date().nullish(),scope:g.string().nullish(),password:g.string().nullish(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),qa=g.object({id:g.string(),email:g.string().transform(e=>e.toLowerCase()),emailVerified:g.boolean().default(!1),name:g.string(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),za=g.object({id:g.string(),userId:g.string(),expiresAt:g.date(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),token:g.string(),ipAddress:g.string().nullish(),userAgent:g.string().nullish()}),Ha=g.object({id:g.string(),value:g.string(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),expiresAt:g.date(),identifier:g.string()});function _t(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let s in e[r].fields){let n=t[r]?.fields?.[s];n&&(e[r].fields[s].fieldName=n)}}return e}var ao=m("/change-password",{method:"POST",body:O.object({newPassword:O.string({description:"The new password to set"}),currentPassword:O.string({description:"The current password"}),revokeOtherSessions:O.boolean({description:"Revoke all other sessions"}).optional()}),use:[U],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,s=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(s.user.id)).find(l=>l.providerId==="credential"&&l.password);if(!a||!a.password)throw new _("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new _("BAD_REQUEST",{message:f.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let p=null;if(o){await e.context.internalAdapter.deleteSessions(s.user.id);let l=await e.context.internalAdapter.createSession(s.user.id,e.headers);if(!l)throw new _("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION});await E(e,{session:l,user:s.user}),p=l.token}return e.json({token:p})}),co=m("/set-password",{method:"POST",body:O.object({newPassword:O.string()}),metadata:{SERVER_ONLY:!0},use:[U]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let i=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!i)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new _("BAD_REQUEST",{message:"user already has a password"})}),uo=m("/delete-user",{method:"POST",use:[U],body:O.object({callbackURL:O.string().optional(),password:O.string().optional(),token:O.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new _("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new _("BAD_REQUEST",{message:f.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let s=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-s>n)throw new _("BAD_REQUEST",{message:f.SESSION_EXPIRED})}if(e.body.token)return await Ut({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let s=N(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${s}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${s}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:s},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),C(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ut=m("/delete-user/callback",{method:"GET",query:O.object({token:O.string(),callbackURL:O.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _("NOT_FOUND");let t=await H(e);if(!t)throw new _("NOT_FOUND",{message:f.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _("NOT_FOUND",{message:f.INVALID_TOKEN});if(r.value!==t.user.id)throw new _("NOT_FOUND",{message:f.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),C(e);let s=e.context.options.user.deleteUser?.afterDelete;if(s&&await s(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),lo=m("/change-email",{method:"POST",query:O.object({currentURL:O.string().optional()}).optional(),body:O.object({newEmail:O.string({description:"The new email to set"}).email(),callbackURL:O.string({description:"The URL to redirect to after email verification"}).optional()}),use:[U],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let s=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await W(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var po=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,mo=m("/error",{method:"GET",metadata:{...ee,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(po(t),{headers:{"Content-Type":"text/html"}})});var fo=m("/ok",{method:"GET",metadata:{...ee,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as fc}from"zod";import{APIError as Tc}from"better-call";import{z as ue}from"zod";import{APIError as Ot}from"better-call";var go=m("/list-accounts",{method:"GET",use:[U],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,accountId:o.accountId,provider:o.providerId})))}),ho=m("/link-social",{method:"POST",requireHeaders:!0,query:ue.object({currentURL:ue.string().optional()}).optional(),body:ue.object({callbackURL:ue.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:ue.enum(xe,{description:"The OAuth2 provider to use"})}),use:[U],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ot("BAD_REQUEST",{message:f.SOCIAL_ACCOUNT_ALREADY_LINKED});let s=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!s)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ot("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});let n=await we(e,{userId:t.user.id,email:t.user.email}),i=await s.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${s.id}`});return e.json({url:i.toString(),redirect:!0})});import"defu";import{APIError as Et}from"better-call";import{z as G}from"zod";import{APIError as le}from"better-call";var Ae="two_factor";var Te="trust_device";import{z as St}from"zod";import{createHMAC as wo}from"@better-auth/utils/hmac";import"@better-auth/utils/base64";var X=M({body:St.object({trustDevice:St.boolean().optional()})},async e=>{let t=await H(e);if(!t){let r=e.context.createAuthCookie(Ae),o=await e.getSignedCookie(r.name,e.context.secret);if(!o)throw new le("UNAUTHORIZED",{message:"invalid two factor cookie"});let s=await e.context.internalAdapter.findUserById(o);if(!s)throw new le("UNAUTHORIZED",{message:"invalid two factor cookie"});let n=await e.context.internalAdapter.createSession(o,e.request);if(!n)throw new le("INTERNAL_SERVER_ERROR",{message:"failed to create session"});return{valid:async()=>{if(await E(e,{session:n,user:s}),e.body.trustDevice){let i=e.context.createAuthCookie(Te,{maxAge:2592e3}),c=await wo("SHA-256","base64urlnopad").sign(e.context.secret,`${s.id}!${n.token}`);await e.setSignedCookie(i.name,`${c}!${n.token}`,e.context.secret,i.attributes)}return e.json({token:n.token})},invalid:async()=>{throw new le("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:{session:n,user:s}}}return{valid:async()=>e.json({token:t.session.token}),invalid:async()=>{throw new le("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:t}});import{APIError as pe}from"better-call";var x={OTP_NOT_ENABLED:"OTP not enabled",OTP_HAS_EXPIRED:"OTP has expired",TOTP_NOT_ENABLED:"TOTP not enabled",TWO_FACTOR_NOT_ENABLED:"Two factor isn't enabled",BACKUP_CODES_NOT_ENABLED:"Backup codes aren't enabled",INVALID_BACKUP_CODE:"Invalid backup code"};function yo(e){return Array.from({length:e?.amount??10}).fill(null).map(()=>N(e?.length??10,"a-z","0-9","A-Z")).map(t=>`${t.slice(0,5)}-${t.slice(5)}`)}async function Le(e,t){let r=e,o=t?.customBackupCodesGenerate?t.customBackupCodesGenerate():yo(),s=await se({data:JSON.stringify(o),key:r});return{backupCodes:o,encryptedBackupCodes:s}}async function bo(e,t){let r=await vt(e.backupCodes,t);return r?{status:r.includes(e.code),updated:r.filter(o=>o!==e.code)}:{status:!1,updated:null}}async function vt(e,t){let r=Buffer.from(await ie({key:t,data:e})).toString("utf-8"),o=JSON.parse(r),s=G.array(G.string()).safeParse(o);return s.success?s.data:null}var Pt=e=>{let t="twoFactor";return{id:"backup_code",endpoints:{verifyBackupCode:m("/two-factor/verify-backup-code",{method:"POST",body:G.object({code:G.string(),disableSession:G.boolean().optional()}),use:[X]},async r=>{let o=r.context.session.user,s=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:o.id}]});if(!s)throw new pe("BAD_REQUEST",{message:x.BACKUP_CODES_NOT_ENABLED});let n=await bo({backupCodes:s.backupCodes,code:r.body.code},r.context.secret);if(!n.status)throw new pe("UNAUTHORIZED",{message:x.INVALID_BACKUP_CODE});let i=await se({key:r.context.secret,data:JSON.stringify(n.updated)});return await r.context.adapter.updateMany({model:t,update:{backupCodes:i},where:[{field:"userId",value:o.id}]}),r.body.disableSession||await E(r,{session:r.context.session.session,user:o}),r.json({user:o,session:r.context.session})}),generateBackupCodes:m("/two-factor/generate-backup-codes",{method:"POST",body:G.object({password:G.string()}),use:[U]},async r=>{let o=r.context.session.user;if(!o.twoFactorEnabled)throw new pe("BAD_REQUEST",{message:x.TWO_FACTOR_NOT_ENABLED});await r.context.password.checkPassword(o.id,r);let s=await Le(r.context.secret,e);return await r.context.adapter.update({model:t,update:{backupCodes:s.encryptedBackupCodes},where:[{field:"userId",value:r.context.session.user.id}]}),r.json({status:!0,backupCodes:s.backupCodes})}),viewBackupCodes:m("/two-factor/view-backup-codes",{method:"GET",body:G.object({userId:G.string()}),metadata:{SERVER_ONLY:!0}},async r=>{let o=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:r.body.userId}]});if(!o)throw new pe("BAD_REQUEST",{message:"Backup codes aren't enabled"});let s=await vt(o.backupCodes,r.context.secret);if(!s)throw new pe("BAD_REQUEST",{message:x.BACKUP_CODES_NOT_ENABLED});return r.json({status:!0,backupCodes:s})})}}};import{APIError as me}from"better-call";import{z as It}from"zod";var xt=e=>{let t={...e,digits:e?.digits||6,period:(e?.period||3)*60*1e3},r="twoFactor",o=m("/two-factor/send-otp",{method:"POST",use:[X],metadata:{openapi:{summary:"Send two factor OTP",description:"Send two factor OTP to the user",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{if(!e||!e.sendOTP)throw n.context.logger.error("send otp isn't configured. Please configure the send otp function on otp options."),new me("BAD_REQUEST",{message:"otp isn't configured"});let i=n.context.session.user;if(!await n.context.adapter.findOne({model:r,where:[{field:"userId",value:i.id}]}))throw new me("BAD_REQUEST",{message:x.OTP_NOT_ENABLED});let a=N(t.digits,"0-9");return await n.context.internalAdapter.createVerificationValue({value:a,identifier:`2fa-otp-${i.id}`,expiresAt:new Date(Date.now()+t.period)}),await e.sendOTP({user:i,otp:a},n.request),n.json({status:!0})}),s=m("/two-factor/verify-otp",{method:"POST",body:It.object({code:It.string({description:"The otp code to verify"})}),use:[X],metadata:{openapi:{summary:"Verify two factor OTP",description:"Verify two factor OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{let i=n.context.session.user;if(!i.twoFactorEnabled)throw new me("BAD_REQUEST",{message:"two factor isn't enabled"});if(!await n.context.adapter.findOne({model:r,where:[{field:"userId",value:i.id}]}))throw new me("BAD_REQUEST",{message:x.OTP_NOT_ENABLED});let a=await n.context.internalAdapter.findVerificationValue(`2fa-otp-${i.id}`);if(!a||a.expiresAt<new Date)throw new me("BAD_REQUEST",{message:x.OTP_HAS_EXPIRED});return a.value===n.body.code?n.context.valid():n.context.invalid()});return{id:"otp",endpoints:{sendTwoFactorOTP:o,verifyTwoFactorOTP:s}}};import{APIError as te}from"better-call";import{z as Re}from"zod";import{createOTP as Ce}from"@better-auth/utils/otp";var Lt=e=>{let t={...e,digits:e?.digits||6,period:e?.period||30},r="twoFactor",o=m("/totp/generate",{method:"POST",use:[U],metadata:{openapi:{summary:"Generate TOTP code",description:"Use this endpoint to generate a TOTP code",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{code:{type:"string"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new te("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new te("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});return{code:await Ce(a.secret,{period:t.period,digits:t.digits}).totp()}}),s=m("/two-factor/get-totp-uri",{method:"POST",use:[U],body:Re.object({password:Re.string({description:"User password"})}),metadata:{openapi:{summary:"Get TOTP URI",description:"Use this endpoint to get the TOTP URI",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new te("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a||!c.twoFactorEnabled)throw new te("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});let d=await ie({key:i.context.secret,data:a.secret});return await i.context.password.checkPassword(c.id,i),{totpURI:Ce(d,{digits:t.digits,period:t.period}).url(e?.issuer||i.context.appName,c.email)}}),n=m("/two-factor/verify-totp",{method:"POST",body:Re.object({code:Re.string({description:"The otp code to verify"})}),use:[X],metadata:{openapi:{summary:"Verify two factor TOTP",description:"Verify two factor TOTP",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new te("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new te("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});let d=await ie({key:i.context.secret,data:a.secret});if(!await Ce(d,{period:t.period,digits:t.digits}).verify(i.body.code))return i.context.invalid();if(!c.twoFactorEnabled){let p=await i.context.internalAdapter.updateUser(c.id,{twoFactorEnabled:!0}),l=await i.context.internalAdapter.createSession(c.id,i.request,!1,i.context.session.session).catch(h=>{throw h});await i.context.internalAdapter.deleteSession(i.context.session.session.token),await E(i,{session:l,user:p})}return i.context.valid()});return{id:"totp",endpoints:{generateTOTP:o,getTOTPURI:s,verifyTOTP:n}}};import{APIError as lu}from"better-call";async function De(e,t){let o=(await e.context.internalAdapter.findAccounts(t.userId))?.find(i=>i.providerId==="credential"),s=o?.password;return!o||!s?!1:await e.context.password.verify({hash:s,password:t.password})}import{APIError as Dt}from"better-call";var Ct={user:{fields:{twoFactorEnabled:{type:"boolean",required:!1,defaultValue:!1,input:!1}}},twoFactor:{fields:{secret:{type:"string",required:!0,returned:!1},backupCodes:{type:"string",required:!0,returned:!1},userId:{type:"string",required:!0,returned:!1,references:{model:"user",field:"id"}}}}};import{createOTP as Ao}from"@better-auth/utils/otp";import{createHMAC as Nt}from"@better-auth/utils/hmac";var fu=e=>({id:"two-factor",$InferServerPlugin:{},atomListeners:[{matcher:t=>t.startsWith("/two-factor/"),signal:"$sessionSignal"}],pathMethods:{"/two-factor/disable":"POST","/two-factor/enable":"POST","/two-factor/send-otp":"POST","/two-factor/generate-backup-codes":"POST"},fetchPlugins:[{id:"two-factor",name:"two-factor",hooks:{async onSuccess(t){t.data?.twoFactorRedirect&&e?.onTwoFactorRedirect&&await e.onTwoFactorRedirect()}}}]});var Lu=e=>{let t={twoFactorTable:"twoFactor"},r=Lt(e?.totpOptions),o=Pt(e?.backupCodeOptions),s=xt(e?.otpOptions);return{id:"two-factor",endpoints:{...r.endpoints,...s.endpoints,...o.endpoints,enableTwoFactor:m("/two-factor/enable",{method:"POST",body:Ee.object({password:Ee.string({description:"User password"}).min(8)}),use:[U],metadata:{openapi:{summary:"Enable two factor authentication",description:"Use this endpoint to enable two factor authentication. This will generate a TOTP URI and backup codes. Once the user verifies the TOTP URI, the two factor authentication will be enabled.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string",description:"TOTP URI"},backupCodes:{type:"array",items:{type:"string"},description:"Backup codes"}}}}}}}}}},async n=>{let i=n.context.session.user,{password:c}=n.body;if(!await De(n,{password:c,userId:i.id}))throw new Dt("BAD_REQUEST",{message:f.INVALID_PASSWORD});let d=N(32),u=await se({key:n.context.secret,data:d}),p=await Le(n.context.secret,e?.backupCodeOptions);if(e?.skipVerificationOnEnable){let h=await n.context.internalAdapter.updateUser(i.id,{twoFactorEnabled:!0}),b=await n.context.internalAdapter.createSession(h.id,n.request,!1,n.context.session.session);await E(n,{session:b,user:i}),await n.context.internalAdapter.deleteSession(n.context.session.session.token)}await n.context.adapter.deleteMany({model:t.twoFactorTable,where:[{field:"userId",value:i.id}]}),await n.context.adapter.create({model:t.twoFactorTable,data:{secret:u,backupCodes:p.encryptedBackupCodes,userId:i.id}});let l=Ao(d,{digits:e?.totpOptions?.digits||6,period:e?.totpOptions?.period}).url(e?.issuer||n.context.appName,i.email);return n.json({totpURI:l,backupCodes:p.backupCodes})}),disableTwoFactor:m("/two-factor/disable",{method:"POST",body:Ee.object({password:Ee.string({description:"User password"}).min(8)}),use:[U],metadata:{openapi:{summary:"Disable two factor authentication",description:"Use this endpoint to disable two factor authentication.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{let i=n.context.session.user,{password:c}=n.body;if(!await De(n,{password:c,userId:i.id}))throw new Dt("BAD_REQUEST",{message:"Invalid password"});await n.context.internalAdapter.updateUser(i.id,{twoFactorEnabled:!1}),await n.context.adapter.delete({model:t.twoFactorTable,where:[{field:"userId",value:i.id}]});let d=await n.context.internalAdapter.createSession(i.id,n.request,!1,n.context.session.session);return await E(n,{session:d,user:i}),await n.context.internalAdapter.deleteSession(n.context.session.session.token),n.json({status:!0})})},options:e,hooks:{after:[{matcher(n){return n.path==="/sign-in/email"||n.path==="/sign-in/username"||n.path==="/sign-in/phone-number"},handler:M(async n=>{let i=n.context.newSession;if(!i||!i?.user.twoFactorEnabled)return;let c=n.context.createAuthCookie(Te),a=await n.getSignedCookie(c.name,n.context.secret);if(a){let[u,p]=a.split("!"),l=await Nt("SHA-256","base64urlnopad").sign(n.context.secret,`${i.user.id}!${p}`);if(u===l){let h=await Nt("SHA-256","base64urlnopad").sign(n.context.secret,`${i.user.id}!${p}`);await n.setSignedCookie(c.name,`${h}!${i.session.token}`,n.context.secret,c.attributes);return}}C(n),await n.context.internalAdapter.deleteSession(i.session.token);let d=n.context.createAuthCookie(Ae,{maxAge:60*10});return await n.setSignedCookie(d.name,i.user.id,n.context.secret,d.attributes),n.json({twoFactorRedirect:!0})})}]},schema:_t(Ct,e?.schema),rateLimit:[{pathMatcher(n){return n.startsWith("/two-factor/")},window:10,max:3}]}};export{Lu as twoFactor,fu as twoFactorClient};
