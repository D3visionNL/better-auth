"use strict";var Ue=Object.defineProperty;var zt=Object.getOwnPropertyDescriptor;var Ht=Object.getOwnPropertyNames;var Ft=Object.prototype.hasOwnProperty;var Gt=(e,t)=>{for(var r in t)Ue(e,r,{get:t[r],enumerable:!0})},Zt=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ht(t))!Ft.call(e,n)&&n!==r&&Ue(e,n,{get:()=>t[n],enumerable:!(o=zt(t,n))||o.enumerable});return e};var Wt=e=>Zt(Ue({},"__esModule",{value:!0}),e);var po={};Gt(po,{oidcProvider:()=>uo});module.exports=Wt(po);var Vt=require("jose"),D=require("zod");var ce=require("better-call");var ze=require("better-call");var X=require("better-call"),$e=(0,X.createMiddleware)(async()=>({})),ue=(0,X.createMiddlewareCreator)({use:[$e,(0,X.createMiddleware)(async()=>({}))]}),g=(0,X.createEndpointCreator)({use:[$e]});function Ee(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function Qt(e){let t="";for(let r=0;r<e.length;r++)t+=Ee(e[r]);return t}function Ve(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Ve(l,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=Qt(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",s=t?`${o}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let l=c[d],p=c[d+1],u="";if(!(!l&&d>0)){if(t&&(d===c.length-1?u=s:p!=="**"?u=i:u=""),t&&l==="**"){u&&(a+=d===0?"":u,a+=`(?:${n}*?${u})*?`);continue}for(let y=0;y<l.length;y++){let m=l[y];m==="\\"?y<l.length-1&&(a+=Ee(l[y+1]),y++):m==="?"?a+=n:m==="*"?a+=`${n}*?`:a+=Ee(m)}a+=u}}return a}function Jt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Te(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ve(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=Jt.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}var ge=Object.create(null),pe=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ge:globalThis),qe=new Proxy(ge,{get(e,t){return pe()[t]??ge[t]},has(e,t){let r=pe();return t in r||t in ge},set(e,t,r){let o=pe(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=pe(!0);return delete r[t],!0},ownKeys(){let e=pe(!0);return Object.keys(e)}});function Kt(e){return e?e!=="false":!1}var ve=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Se=ve==="dev"||ve==="development",Yt=ve==="test"||Kt(qe.TEST);var Q=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Be(e){try{return new URL(e).origin}catch{return null}}function Me(e){return e.includes("://")?new URL(e).host:e}var Xt=ue(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,s=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,l=o.trustedOrigins,p=e.headers?.has("cookie"),u=(m,f)=>m.startsWith("/")?!1:f.includes("*")?Te(f)(Me(m)):m.startsWith(f),y=(m,f)=>{if(!m)return;if(!l.some(N=>u(m,N)||m?.startsWith("/")&&f!=="origin"&&!m.includes(":")))throw e.context.logger.error(`Invalid ${f}: ${m}`),e.context.logger.info(`If it's a valid URL, please add ${m} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new ze.APIError("FORBIDDEN",{message:`Invalid ${f}`})};p&&!e.context.options.advanced?.disableCSRFCheck&&y(n,"origin"),i&&y(i,"callbackURL"),s&&y(s,"redirectURL"),c&&y(c,"currentURL"),a&&y(a,"errorCallbackURL"),d&&y(s,"newUserCallbackURL")});var x=require("better-call"),T=require("zod");var J=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var Fe=require("@better-auth/utils/base64");var Ge=require("@better-auth/utils/hmac");function He(e){let t=new Map;return e.split(", ").forEach(o=>{let n=o.split(";").map(p=>p.trim()),[i,...s]=n,[c,...a]=i.split("="),d=a.join("=");if(!c||d===void 0)return;let l={value:d};s.forEach(p=>{let[u,...y]=p.split("="),m=y.join("="),f=u.trim().toLowerCase();switch(f){case"max-age":l["max-age"]=m?parseInt(m.trim(),10):void 0;break;case"expires":l.expires=m?new Date(m.trim()):void 0;break;case"domain":l.domain=m?m.trim():void 0;break;case"path":l.path=m?m.trim():void 0;break;case"secure":l.secure=!0;break;case"httponly":l.httponly=!0;break;case"samesite":l.samesite=m?m.trim().toLowerCase():void 0;break;default:l[f]=m?m.trim():!0;break}}),t.set(c,l)}),t}async function Oe(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Fe.base64Url.encode(JSON.stringify({session:t,expiresAt:J(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Ge.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new Q("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function $(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Oe(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function z(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var er=Object.defineProperty,tr=Object.defineProperties,rr=Object.getOwnPropertyDescriptors,Ze=Object.getOwnPropertySymbols,or=Object.prototype.hasOwnProperty,nr=Object.prototype.propertyIsEnumerable,We=(e,t,r)=>t in e?er(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ee=(e,t)=>{for(var r in t||(t={}))or.call(t,r)&&We(e,r,t[r]);if(Ze)for(var r of Ze(t))nr.call(t,r)&&We(e,r,t[r]);return e},te=(e,t)=>tr(e,rr(t)),ir=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},sr=async(e,t)=>{var r,o,n,i,s,c;let a=t||{},d={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:d};for(let l of t?.plugins||[]){if(l.init){let p=await((r=l.init)==null?void 0:r.call(l,e.toString(),t));a=p.options||a,e=p.url}d.onRequest.push((o=l.hooks)==null?void 0:o.onRequest),d.onResponse.push((n=l.hooks)==null?void 0:n.onResponse),d.onSuccess.push((i=l.hooks)==null?void 0:i.onSuccess),d.onError.push((s=l.hooks)==null?void 0:s.onError),d.onRetry.push((c=l.hooks)==null?void 0:c.onRetry)}return{url:e,options:a,hooks:d}},Qe=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},ar=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function cr(e){if(typeof e=="number")return new Qe({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Qe(e);case"exponential":return new ar(e);default:throw new Error("Invalid retry strategy")}}var dr=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),n=r(e.auth.password);if(!o||!n)return t;t.authorization=`Basic ${btoa(`${o}:${n}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},Ye=["get","post","put","patch","delete"];var lr=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function ur(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return lr.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function pr(e){try{return JSON.parse(e),!0}catch{return!1}}function Xe(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function Je(e){try{return JSON.parse(e)}catch{return e}}function Ke(e){return typeof e=="function"}function fr(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&Ke(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&Ke(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function mr(e){let t=new Headers(e?.headers),r=dr(e);for(let[o,n]of Object.entries(r||{}))t.set(o,n);if(!t.has("content-type")){let o=hr(e?.body);o&&t.set("content-type",o)}return t}function hr(e){return Xe(e)?"application/json":null}function gr(e){if(!e?.body)return null;let t=new Headers(e?.headers);return Xe(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function wr(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return Ye.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function yr(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function br(e,t){let{baseURL:r,params:o,query:n}=t||{query:{},params:{},baseURL:""},i=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!i)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let p=e.toString().split("@")[1].split("/")[0];Ye.includes(p)&&(e=e.replace(`@${p}/`,"/"))}i.endsWith("/")||(i+="/");let[s,c]=e.replace(i,"").split("?"),a=new URLSearchParams(c);for(let[p,u]of Object.entries(n||{}))a.set(p,String(u));if(o)if(Array.isArray(o)){let p=s.split("/").filter(u=>u.startsWith(":"));for(let[u,y]of p.entries()){let m=o[u];s=s.replace(y,m)}}else for(let[p,u]of Object.entries(o))s=s.replace(`:${p}`,String(u));s=s.split("/").map(encodeURIComponent).join("/"),s.startsWith("/")&&(s=s.slice(1));let d=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${s}${d}`,i)}var R=async(e,t)=>{var r,o,n,i,s,c,a,d;let{hooks:l,url:p,options:u}=await sr(e,t),y=fr(u),m=new AbortController,f=(r=u.signal)!=null?r:m.signal,re=br(p,u),N=gr(u),W=mr(u),I=wr(p,u),_=te(ee({},u),{url:re,headers:W,body:N,method:I,signal:f});for(let U of l.onRequest)if(U){let O=await U(_);O instanceof Object&&(_=O)}("pipeTo"in _&&typeof _.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in _||(_.duplex="half"));let{clearTimeout:me}=yr(u,m),A=await y(_.url,_);me();let de={response:A,request:_};for(let U of l.onResponse)if(U){let O=await U(te(ee({},de),{response:(n=t?.hookOptions)!=null&&n.cloneResponse?A.clone():A}));O instanceof Response?A=O:O instanceof Object&&(A=O.response)}if(A.ok){if(!(_.method!=="HEAD"))return{data:"",error:null};let O=ur(A),j={data:"",response:A,request:_};if(O==="json"||O==="text"){let q=await A.text(),Mt=await((i=_.jsonParser)!=null?i:Je)(q);j.data=Mt}else j.data=await A[O]();_?.output&&_.output&&!_.disableValidation&&(j.data=_.output.parse(j.data));for(let q of l.onSuccess)q&&await q(te(ee({},j),{response:(s=t?.hookOptions)!=null&&s.cloneResponse?A.clone():A}));return t?.throw?j.data:{data:j.data,error:null}}let Re=(c=t?.jsonParser)!=null?c:Je,he=await A.text(),le=pr(he)?await Re(he):{},ke={response:A,request:_,error:te(ee({},le),{status:A.status,statusText:A.statusText})};for(let U of l.onError)U&&await U(te(ee({},ke),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?A.clone():A}));if(t?.retry){let U=cr(t.retry),O=(d=t.retryAttempt)!=null?d:0;if(await U.shouldAttemptRetry(O,A)){for(let q of l.onRetry)q&&await q(de);let j=U.getDelay(O);return await new Promise(q=>setTimeout(q,j)),await R(e,te(ee({},t),{retryAttempt:O+1}))}}if(t?.throw)throw new ir(A.status,A.statusText,le);return{data:null,error:te(ee({},le),{status:A.status,statusText:A.statusText})}};var at=require("better-call"),K=require("jose");var et=require("@better-auth/utils/hash"),tt=require("@better-auth/utils/base64");async function rt(e){let t=await(0,et.createHash)("SHA-256").digest(e);return tt.base64Url.encode(new Uint8Array(t),{padding:!1})}function we(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?J(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function E({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:s,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",i.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),n){let l=await rt(n);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((p,u)=>(p[u]=null,p),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&d.searchParams.set("duration",a),d}var Ar=require("jose");async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let s=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",r),i==="basic"){let p=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${p}`}else s.set("client_id",o.clientId),s.set("client_secret",o.clientSecret);let{data:a,error:d}=await R(n,{method:"POST",body:s,headers:c});if(d)throw d;return we(a)}var H=require("zod"),xe=require("better-call");var Tr=require("@better-auth/utils/hash"),vr=require("@noble/ciphers/chacha"),Ie=require("@noble/ciphers/utils"),Sr=require("@noble/ciphers/webcrypto");var Rr=require("@better-auth/utils/hash");var ot=require("jose");async function nt(e,t,r=3600){return await new ot.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}var kr=require("@noble/hashes/scrypt"),Ur=require("uncrypto"),Er=require("@better-auth/utils/hex");var it=require("@better-auth/utils/random"),P=(0,it.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function ye(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Be(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new xe.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=P(128),n=P(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:s});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new xe.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function st(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=H.z.object({callbackURL:H.z.string(),codeVerifier:H.z.string(),errorURL:H.z.string().optional(),newUserURL:H.z.string().optional(),expiresAt:H.z.number(),link:H.z.object({email:H.z.string(),userId:H.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var ct=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=(0,K.decodeProtectedHeader)(r),{kid:i,alg:s}=n;if(!i||!s)return!1;let c=await Or(i),{payload:a}=await(0,K.jwtVerify)(r,c,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,K.decodeJwt)(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},Or=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await R(`${t}${r}`);if(!o?.keys)throw new at.APIError("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await(0,K.importJWK)(n,n.alg)};var dt=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}});var lt=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await E({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}});var ut=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let s=o||["user:email"];return e.scope&&s.push(...e.scope),E({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:r,redirectURI:i})},validateAuthorizationCode:async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await R("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:s}=await R("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});s&&(o.email=(s.find(a=>a.primary)??s[0])?.email,i=s.find(a=>a.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...c},data:o}}}};var Pe=["info","success","warn","error","debug"];function Ir(e,t){return Pe.indexOf(t)<=Pe.indexOf(e)}var F={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},xr={info:F.fg.blue,success:F.fg.green,warn:F.fg.yellow,error:F.fg.red,debug:F.fg.magenta},Pr=(e,t)=>{let r=new Date().toISOString();return`${F.dim}${r}${F.reset} ${xr[e]}${e.toUpperCase()}${F.reset} ${F.bright}[Better Auth]:${F.reset} ${t}`},Lr=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(n,i,s=[])=>{if(!t||!Ir(r,n))return;let c=Pr(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(c,...s):n==="warn"?console.warn(c,...s):console.log(c,...s);return}e.log(n==="success"?"info":n,c,...s)};return Object.fromEntries(Pe.map(n=>[n,(...[i,...s])=>o(n,i,s)]))},B=Lr();var pt=require("jose"),ft=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw B.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new Q("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new Q("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let s=await E({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),s},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await R(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,pt.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});var mt=require("jose"),ht=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),E({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:s}){return k({code:n,codeVerifier:i,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=(0,mt.decodeJwt)(n.idToken),s=e.profilePhotoSize||48;await R(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),p=Buffer.from(l).toString("base64");i.picture=`data:image/jpeg;base64, ${p}`}catch(d){B.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...c},data:i}}}};var gt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),E({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}});var oe={isAction:!1};var wt=require("@better-auth/utils/random"),yt=e=>(0,wt.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var bt=require("jose"),At=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),E({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return B.error("No idToken found in token"),null;let o=(0,bt.decodeJwt)(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}});var _t=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),E({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}});var Rt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let s=o||["account_info.read"];return e.scope&&s.push(...e.scope),await E({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:r,redirectURI:i,codeVerifier:n})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await R("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}};var kt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:n,redirectURI:i})=>{let s=n||["profile","email","openid"];return e.scope&&s.push(...e.scope),await E({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:o,redirectURI:i})},validateAuthorizationCode:async({code:o,redirectURI:n})=>await k({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:n,error:i}=await R("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let s=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...s},data:n}}}};var Le=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Dr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Le(`${t}/oauth/authorize`),tokenEndpoint:Le(`${t}/oauth/token`),userinfoEndpoint:Le(`${t}/api/v4/user`)}},Ut=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Dr(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:c,codeVerifier:a,redirectURI:d})=>{let l=c||["read_user"];return e.scope&&l.push(...e.scope),await E({id:n,options:e,authorizationEndpoint:t,scopes:l,state:s,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:c,codeVerifier:a})=>k({code:s,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:c,error:a}=await R(o,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var Et=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),E({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:s}=await R("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(s)throw s;return we(i)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}});var Tt=e=>({id:"roblox",name:"Roblox",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["openid","profile"];return e.scope&&n.push(...e.scope),new URL(`https://apis.roblox.com/oauth/v1/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"select_account+consent"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://apis.roblox.com/oauth/v1/token",authentication:"post"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await R("https://apis.roblox.com/oauth/v1/userinfo",{headers:{authorization:`Bearer ${t.accessToken}`}});return o?null:{user:{id:r.sub,name:r.nickname||r.preferred_username||"",image:r.picture,email:"",emailVerified:!0},data:{...r}}}});var vt=require("zod"),Cr={apple:ct,discord:dt,facebook:lt,github:ut,microsoft:ht,google:ft,spotify:gt,twitch:At,twitter:_t,dropbox:Rt,linkedin:kt,gitlab:Ut,reddit:Et,roblox:Tt},De=Object.keys(Cr),St=vt.z.enum(De,{description:"OAuth2 provider to use"});var V=require("zod");var ne=require("better-call");var G=require("better-call");var Y=require("zod");function Ot(e){try{return JSON.parse(e)}catch{return null}}var h={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var It=require("@better-auth/utils/hmac"),xt=require("@better-auth/utils/base64"),Pt=require("@better-auth/utils/binary"),Lt=()=>g("/get-session",{method:"GET",query:Y.z.optional(Y.z.object({disableCookieCache:Y.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Y.z.string().transform(e=>e==="true")).optional(),disableRefresh:Y.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Ot(Pt.binary.decode(xt.base64.decode(r))):null;if(o&&!await(0,It.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return z(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let u=e.context.authCookies.sessionData.name;e.setCookie(u,"",{maxAge:0})}else return e.json(l)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return z(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let s=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-s*1e3+c*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:J(e.context.sessionConfig.expiresIn,"sec")});if(!l)return z(e),e.json(null,{status:401});let p=(l.expiresAt.valueOf()-Date.now())/1e3;return await $(e,{session:l,user:i.user},!1,{maxAge:p}),e.json({session:l,user:i.user})}return await Oe(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new G.APIError("INTERNAL_SERVER_ERROR",{message:h.FAILED_TO_GET_SESSION})}}),M=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Lt()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},L=ue(async e=>{let t=await M(e);if(!t?.session)throw new G.APIError("UNAUTHORIZED");return{session:t}}),os=ue(async e=>{let t=await M(e);if(!t?.session)throw new G.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new G.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Nr=g("/revoke-session",{method:"POST",body:Y.z.object({token:Y.z.string({description:"The token to revoke"})}),use:[L],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new G.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new G.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new G.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),jr=g("/revoke-sessions",{method:"POST",use:[L],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new G.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),$r=g("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[L],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new G.APIError("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});var Dt=require("jose");async function Z(e,t,r){return await nt({email:t.toLowerCase(),updateTo:r},e)}async function Vr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ne.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await Z(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var qr=g("/send-verification-email",{method:"POST",query:V.z.object({currentURL:V.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:V.z.object({email:V.z.string({description:"The email to send the verification email to"}).email(),callbackURL:V.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ne.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ne.APIError("BAD_REQUEST",{message:h.USER_NOT_FOUND});return await Vr(e,r.user),e.json({status:!0})}),Br=g("/verify-email",{method:"GET",query:V.z.object({token:V.z.string({description:"The token to verify the email"}),callbackURL:V.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new ne.APIError("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await(0,Dt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let i=V.z.object({email:V.z.string().email(),updateTo:V.z.string().optional()}).parse(o.payload),s=await e.context.internalAdapter.findUserByEmail(i.email);if(!s)return t("user_not_found");if(i.updateTo){let c=await M(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),d=await Z(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let c=await M(e);if(!c||c.user.email!==i.email){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new ne.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await $(e,{session:a,user:s.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function be(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw B.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,s=!i;if(n){let a=n.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,p])=>p!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Se&&B.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(p){return B.error("Unable to link account",p),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let a=await Z(e.context.secret,i.email),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:d,token:a},e.request)}}catch(a){return a instanceof b.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};if(i?.banned)return{error:`user is banned&reason=${i.banReason}`,data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(i.id,e.request);return c?{data:{session:c,user:i},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var Mr=g("/sign-in/social",{method:"POST",query:T.z.object({currentURL:T.z.string().optional()}).optional(),body:T.z.object({callbackURL:T.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.z.string().optional(),errorCallbackURL:T.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:St,disableRedirect:T.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.z.optional(T.z.object({token:T.z.string({description:"ID token from the provider"}),nonce:T.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.z.string({description:"Access token from the provider"}).optional(),refreshToken:T.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new x.APIError("NOT_FOUND",{message:h.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new x.APIError("NOT_FOUND",{message:h.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(i,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new x.APIError("UNAUTHORIZED",{message:h.INVALID_TOKEN});let a=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new x.APIError("UNAUTHORIZED",{message:h.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new x.APIError("UNAUTHORIZED",{message:h.USER_EMAIL_NOT_FOUND});let d=await be(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new x.APIError("UNAUTHORIZED",{message:d.error});return await $(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ye(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),zr=g("/sign-in/email",{method:"POST",body:T.z.object({email:T.z.string({description:"Email of the user"}),password:T.z.string({description:"Password of the user"}),callbackURL:T.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new x.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.z.string().email().safeParse(t).success)throw new x.APIError("BAD_REQUEST",{message:h.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new x.APIError("UNAUTHORIZED",{message:h.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(d=>d.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new x.APIError("UNAUTHORIZED",{message:h.INVALID_EMAIL_OR_PASSWORD});let s=i?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new x.APIError("UNAUTHORIZED",{message:h.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:r}))throw e.context.logger.error("Invalid password"),new x.APIError("UNAUTHORIZED",{message:h.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new x.APIError("UNAUTHORIZED",{message:h.EMAIL_NOT_VERIFIED});let d=await Z(e.context.secret,n.user.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:l,token:d},e.request),new x.APIError("FORBIDDEN",{message:h.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new x.APIError("UNAUTHORIZED",{message:h.FAILED_TO_CREATE_SESSION});return await $(e,{session:a,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},token:a.token,redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var ie=require("zod");var Ae=ie.z.object({code:ie.z.string().optional(),error:ie.z.string().optional(),error_description:ie.z.string().optional(),state:ie.z.string().optional()}),Hr=g("/callback/:id",{method:["GET","POST"],body:Ae.optional(),query:Ae.optional(),metadata:oe},async e=>{let t;try{if(e.method==="GET")t=Ae.parse(e.query);else if(e.method==="POST")t=Ae.parse(e.body);else throw new Error("Unsupported method")}catch(I){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",I),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let s=e.context.socialProviders.find(I=>I.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:l,newUserURL:p}=await st(e),u;try{u=await s.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(I){throw e.context.logger.error("",I),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let y=await s.getUserInfo(u).then(I=>I?.user);function m(I){let _=l||a||`${e.context.baseURL}/error`;throw _.includes("?")?_=`${_}&error=${I}`:_=`${_}?error=${I}`,e.redirect(_)}if(!y)return e.context.logger.error("Unable to get user info"),m("unable_to_get_user_info");if(!y.email&&s.id!=="roblox")return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),m("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==y?.email?.toLowerCase()&&s.id!=="roblox")return m("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:s.id,accountId:y.id,name:y.name||y.email||"",accessToken:u.accessToken,refreshToken:u.refreshToken,accessTokenExpiresAt:u.accessTokenExpiresAt,scope:u.scopes?.join(","),image:y.image}))return m("unable_to_link_account");let _;try{_=a.toString()}catch{_=a}throw e.redirect(_)}let f=await be(e,{userInfo:{...y,email:y.email||"",name:y.name||y.email||""},account:{providerId:s.id,accountId:y.id,...u,image:y.image,scope:u.scopes?.join(",")},callbackURL:a});if(f.error)return e.context.logger.error(f.error.split(" ").join("_")),m(f.error.split(" ").join("_"));let{session:re,user:N}=f.data;await $(e,{session:re,user:N});let W;try{W=(f.isRegister&&p||a).toString()}catch{W=f.isRegister&&p||a}throw e.redirect(W)});var Os=require("zod");var Ct=require("better-call");var Fr=g("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw z(e),new Ct.APIError("BAD_REQUEST",{message:h.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),z(e),e.json({success:!0})});var C=require("zod");var se=require("better-call");function Nt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}function Gr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}var Zr=g("/forget-password",{method:"POST",body:C.z.object({email:C.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:C.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new se.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=J(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),s=yt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:i});let c=`${e.context.baseURL}/reset-password/${s}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:s},e.request),e.json({status:!0})}),Wr=g("/reset-password/:token",{method:"GET",query:C.z.object({callbackURL:C.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Nt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(Nt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Gr(e.context,r,{token:t}))}),Qr=g("/reset-password",{query:C.z.optional(C.z.object({token:C.z.string().optional(),currentURL:C.z.string().optional()})),method:"POST",body:C.z.object({newPassword:C.z.string({description:"The new password to set"}),token:C.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new se.APIError("BAD_REQUEST",{message:h.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new se.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_SHORT});if(r.length>n)throw new se.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(i);if(!s||s.expiresAt<new Date)throw new se.APIError("BAD_REQUEST",{message:h.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let c=s.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(p=>p.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});var S=require("zod");var v=require("better-call");var w=require("zod"),Jr=require("better-call"),qs=w.z.object({id:w.z.string(),providerId:w.z.string(),accountId:w.z.string(),name:w.z.string().nullish(),userId:w.z.string(),accessToken:w.z.string().nullish(),refreshToken:w.z.string().nullish(),idToken:w.z.string().nullish(),accessTokenExpiresAt:w.z.date().nullish(),refreshTokenExpiresAt:w.z.date().nullish(),scope:w.z.string().nullish(),password:w.z.string().nullish(),image:w.z.string().nullish(),createdAt:w.z.date().default(()=>new Date),updatedAt:w.z.date().default(()=>new Date)}),Bs=w.z.object({id:w.z.string(),email:w.z.string().transform(e=>e.toLowerCase()),emailVerified:w.z.boolean().default(!1),name:w.z.string(),image:w.z.string().nullish(),createdAt:w.z.date().default(()=>new Date),updatedAt:w.z.date().default(()=>new Date)}),Ms=w.z.object({id:w.z.string(),userId:w.z.string(),expiresAt:w.z.date(),createdAt:w.z.date().default(()=>new Date),updatedAt:w.z.date().default(()=>new Date),token:w.z.string(),ipAddress:w.z.string().nullish(),userAgent:w.z.string().nullish()}),zs=w.z.object({id:w.z.string(),value:w.z.string(),createdAt:w.z.date().default(()=>new Date),updatedAt:w.z.date().default(()=>new Date),expiresAt:w.z.date(),identifier:w.z.string()});var Yr=g("/change-password",{method:"POST",body:S.z.object({newPassword:S.z.string({description:"The new password to set"}),currentPassword:S.z.string({description:"The current password"}),revokeOtherSessions:S.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[L],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new v.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new v.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(n.user.id)).find(u=>u.providerId==="credential"&&u.password);if(!a||!a.password)throw new v.APIError("BAD_REQUEST",{message:h.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new v.APIError("BAD_REQUEST",{message:h.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let p=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let u=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!u)throw new v.APIError("INTERNAL_SERVER_ERROR",{message:h.FAILED_TO_GET_SESSION});await $(e,{session:u,user:n.user}),p=u.token}return e.json({token:p})}),Xr=g("/set-password",{method:"POST",body:S.z.object({newPassword:S.z.string()}),metadata:{SERVER_ONLY:!0},use:[L]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new v.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new v.APIError("BAD_REQUEST",{message:h.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new v.APIError("BAD_REQUEST",{message:"user already has a password"})}),eo=g("/delete-user",{method:"POST",use:[L],body:S.z.object({callbackURL:S.z.string().optional(),password:S.z.string().optional(),token:S.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new v.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!i||!i.password)throw new v.APIError("BAD_REQUEST",{message:h.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new v.APIError("BAD_REQUEST",{message:h.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new v.APIError("BAD_REQUEST",{message:h.SESSION_EXPIRED})}if(e.body.token)return await jt({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=P(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),z(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),jt=g("/delete-user/callback",{method:"GET",query:S.z.object({token:S.z.string(),callbackURL:S.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new v.APIError("NOT_FOUND");let t=await M(e);if(!t)throw new v.APIError("NOT_FOUND",{message:h.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new v.APIError("NOT_FOUND",{message:h.INVALID_TOKEN});if(r.value!==t.user.id)throw new v.APIError("NOT_FOUND",{message:h.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),z(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),to=g("/change-email",{method:"POST",query:S.z.object({currentURL:S.z.string().optional()}).optional(),body:S.z.object({newEmail:S.z.string({description:"The new email to set"}).email(),callbackURL:S.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[L],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new v.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new v.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new v.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new v.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await Z(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var ro=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,oo=g("/error",{method:"GET",metadata:{...oe,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(ro(t),{headers:{"Content-Type":"text/html"}})});var no=g("/ok",{method:"GET",metadata:{...oe,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var io=require("zod");var so=require("better-call");var ae=require("zod");var Ce=require("better-call");var ao=g("/list-accounts",{method:"GET",use:[L],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,accountId:o.accountId,provider:o.providerId})))}),co=g("/link-social",{method:"POST",requireHeaders:!0,query:ae.z.object({currentURL:ae.z.string().optional()}).optional(),body:ae.z.object({callbackURL:ae.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:ae.z.enum(De,{description:"The OAuth2 provider to use"})}),use:[L],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ce.APIError("BAD_REQUEST",{message:h.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ce.APIError("NOT_FOUND",{message:h.PROVIDER_NOT_FOUND});let i=await ye(e,{userId:t.user.id,email:t.user.email}),s=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:s.toString(),redirect:!0})});var tc=require("defu");var b=require("better-call");var qt=require("@better-auth/utils");var $t={oauthApplication:{modelName:"oauthApplication",fields:{name:{type:"string"},icon:{type:"string",required:!1},metadata:{type:"string",required:!1},clientId:{type:"string",unique:!0},clientSecret:{type:"string"},redirectURLs:{type:"string"},type:{type:"string"},disabled:{type:"boolean",required:!1,defaultValue:!1},userId:{type:"string",required:!1},createdAt:{type:"date"},updatedAt:{type:"date"}}},oauthAccessToken:{modelName:"oauthAccessToken",fields:{accessToken:{type:"string",unique:!0},refreshToken:{type:"string",unique:!0},accessTokenExpiresAt:{type:"date"},refreshTokenExpiresAt:{type:"date"},clientId:{type:"string"},userId:{type:"string",required:!1},scopes:{type:"string"},createdAt:{type:"date"},updatedAt:{type:"date"}}},oauthConsent:{modelName:"oauthConsent",fields:{clientId:{type:"string"},userId:{type:"string"},scopes:{type:"string"},createdAt:{type:"date"},updatedAt:{type:"date"},consentGiven:{type:"boolean"}}}};var _e=require("better-call");function fe(e,t,r){return`${e.includes("?")?"&":"?"}error=${t}&error_description=${r}`}async function Ne(e,t){let r={codeExpiresIn:600,defaultScope:"openid",...t,scopes:["openid","profile","email","offline_access",...t?.scopes||[]]};if(!e.request)throw new _e.APIError("UNAUTHORIZED",{error_description:"request not found",error:"invalid_request"});let o=await M(e);if(!o){await e.setSignedCookie("oidc_login_prompt",JSON.stringify(e.query),e.context.secret,{maxAge:600});let f=e.request.url?.split("?")[1];throw e.redirect(`${t.loginPage}?${f}`)}let n=e.query;if(!n.client_id)throw e.redirect(`${e.context.baseURL}/error?error=invalid_client`);if(!n.response_type)throw e.redirect(fe(`${e.context.baseURL}/error`,"invalid_request","response_type is required"));let i=await e.context.adapter.findOne({model:"oauthApplication",where:[{field:"clientId",value:e.query.client_id}]}).then(f=>f?{...f,redirectURLs:f.redirectURLs.split(","),metadata:f.metadata?JSON.parse(f.metadata):{}}:null);if(!i)throw e.redirect(`${e.context.baseURL}/error?error=invalid_client`);let s=i.redirectURLs.find(f=>f===e.query.redirect_uri);if(!s||!n.redirect_uri)throw new _e.APIError("BAD_REQUEST",{message:"Invalid redirect URI"});if(i.disabled)throw e.redirect(`${e.context.baseURL}/error?error=client_disabled`);if(n.response_type!=="code")throw e.redirect(`${e.context.baseURL}/error?error=unsupported_response_type`);let c=n.scope?.split(" ").filter(f=>f)||r.defaultScope.split(" "),a=c.filter(f=>!r.scopes.includes(f)||f==="offline_access"&&n.prompt!=="consent");if(a.length)throw e.redirect(fe(n.redirect_uri,"invalid_scope",`The following scopes are invalid: ${a.join(", ")}`));if((!n.code_challenge||!n.code_challenge_method)&&t.requirePKCE)throw e.redirect(fe(n.redirect_uri,"invalid_request","pkce is required"));if(!["s256",t.allowPlainCodeChallengeMethod?"plain":"s256"].includes(n.code_challenge_method?.toLowerCase()||""))throw e.redirect(fe(n.redirect_uri,"invalid_request","invalid code_challenge method"));let d=P(32,"a-z","A-Z","0-9"),l=r.codeExpiresIn*1e3,p=new Date(Date.now()+l);try{await e.context.internalAdapter.createVerificationValue({value:JSON.stringify({clientId:i.clientId,redirectURI:n.redirect_uri,scope:c,userId:o.user.id,authTime:o.session.createdAt.getTime(),requireConsent:n.prompt==="consent",state:n.prompt==="consent"?n.state:null,codeChallenge:n.code_challenge,codeChallengeMethod:n.code_challenge_method}),identifier:d,expiresAt:p})}catch{throw e.redirect(fe(n.redirect_uri,"server_error","An error occurred while processing the request"))}let u=new URL(s);if(u.searchParams.set("code",d),u.searchParams.set("state",e.query.state),n.prompt!=="consent"||await e.context.adapter.findOne({model:"oauthConsent",where:[{field:"clientId",value:i.clientId},{field:"userId",value:o.user.id}]}).then(f=>!!f?.consentGiven))throw e.redirect(u.toString());if(t?.consentPage){await e.setSignedCookie("oidc_consent_prompt",d,e.context.secret,{maxAge:600});let f=`${t.consentPage}?client_id=${i.clientId}&scope=${c.join(" ")}`;throw e.redirect(f)}let m=t?.getConsentHTML;if(!m)throw new _e.APIError("INTERNAL_SERVER_ERROR",{message:"No consent page provided"});return new Response(m({scopes:c,clientMetadata:i.metadata,clientIcon:i?.icon,clientId:i.clientId,clientName:i.name,code:d}),{headers:{"content-type":"text/html"}})}var Bt=require("@better-auth/utils/hash"),lo=(e,t)=>{let r=e.context.options.baseURL,o=e.context.baseURL;return{issuer:r,authorization_endpoint:`${o}/oauth2/authorize`,token_endpoint:`${o}/oauth2/token`,userInfo_endpoint:`${o}/oauth2/userinfo`,jwks_uri:`${o}/jwks`,registration_endpoint:`${o}/oauth2/register`,scopes_supported:["openid","profile","email","offline_access"],response_types_supported:["code"],response_modes_supported:["query"],grant_types_supported:["authorization_code"],acr_values_supported:["urn:mace:incommon:iap:silver","urn:mace:incommon:iap:bronze"],subject_types_supported:["public"],id_token_signing_alg_values_supported:["RS256","none"],token_endpoint_auth_methods_supported:["client_secret_basic","client_secret_post"],claims_supported:["sub","iss","aud","exp","nbf","iat","jti","email","email_verified","name"],...t?.metadata}},uo=e=>{let t={oauthClient:"oauthApplication",oauthAccessToken:"oauthAccessToken",oauthConsent:"oauthConsent"},r={codeExpiresIn:600,defaultScope:"openid",accessTokenExpiresIn:3600,refreshTokenExpiresIn:604800,...e,scopes:["openid","profile","email","offline_access",...e?.scopes||[]]};return{id:"oidc",hooks:{after:[{matcher(){return!0},handler:async o=>{let n=await o.getSignedCookie("oidc_login_prompt",o.context.secret),i=o.context.authCookies.sessionToken.name,s=He(o.responseHeader.get("set-cookie")||""),c=s.has(i);if(!n||!c)return;o.setCookie("oidc_login_prompt","",{maxAge:0});let d=s.get(i)?.value?.split(".")[0];if(!d)return;let l=await o.context.internalAdapter.findSession(d);return l?(o.query=JSON.parse(n),o.query.prompt="consent",o.context.session=l,await Ne(o,r)):void 0}}]},endpoints:{getOpenIdConfig:g("/.well-known/openid-configuration",{method:"GET"},async o=>lo(o,e)),oAuth2authorize:g("/oauth2/authorize",{method:"GET",query:D.z.record(D.z.string(),D.z.any())},async o=>Ne(o,r)),oAuthConsent:g("/oauth2/consent",{method:"POST",body:D.z.object({accept:D.z.boolean()}),use:[L]},async o=>{let n=await o.getSignedCookie("oidc_consent_prompt",o.context.secret);if(!n)throw new b.APIError("UNAUTHORIZED",{error_description:"No consent prompt found",error:"invalid_grant"});let i=await o.context.internalAdapter.findVerificationValue(n);if(!i)throw new b.APIError("UNAUTHORIZED",{error_description:"Invalid code",error:"invalid_grant"});if(i.expiresAt<new Date)throw await o.context.internalAdapter.deleteVerificationValue(i.id),new b.APIError("UNAUTHORIZED",{error_description:"Code expired",error:"invalid_grant"});let s=JSON.parse(i.value);if(!s.requireConsent||!s.state)throw new b.APIError("UNAUTHORIZED",{error_description:"Consent not required",error:"invalid_grant"});if(!o.body.accept)return await o.context.internalAdapter.deleteVerificationValue(i.id),o.json({redirectURI:`${s.redirectURI}?error=access_denied&error_description=User denied access`});let c=P(32,"a-z","A-Z","0-9"),a=r.codeExpiresIn*1e3,d=new Date(Date.now()+a);await o.context.internalAdapter.updateVerificationValue(i.id,{value:JSON.stringify({...s,requireConsent:!1}),identifier:c,expiresAt:d}),await o.context.adapter.create({model:t.oauthConsent,data:{clientId:s.clientId,userId:s.userId,scopes:s.scope.join(" "),consentGiven:!0,createdAt:new Date,updatedAt:new Date}});let l=new URL(s.redirectURI);return l.searchParams.set("code",c),l.searchParams.set("state",s.state),o.json({redirectURI:l.toString()})}),oAuth2token:g("/oauth2/token",{method:"POST",body:D.z.any(),metadata:{isAction:!1}},async o=>{let{body:n}=o;if(!n)throw new b.APIError("BAD_REQUEST",{error_description:"request body not found",error:"invalid_request"});if(n instanceof FormData&&(n=Object.fromEntries(n.entries())),!(n instanceof Object))throw new b.APIError("BAD_REQUEST",{error_description:"request body is not an object",error:"invalid_request"});let{client_id:i,client_secret:s,grant_type:c,code:a,redirect_uri:d,refresh_token:l,code_verifier:p}=n;if(c==="refresh_token"){if(!l)throw new b.APIError("BAD_REQUEST",{error_description:"refresh_token is required",error:"invalid_request"});let U=await o.context.adapter.findOne({model:t.oauthAccessToken,where:[{field:"refreshToken",value:l.toString()}]});if(!U)throw new b.APIError("UNAUTHORIZED",{error_description:"invalid refresh token",error:"invalid_grant"});if(U.clientId!==i?.toString())throw new b.APIError("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(U.refreshTokenExpiresAt<new Date)throw new b.APIError("UNAUTHORIZED",{error_description:"refresh token expired",error:"invalid_grant"});let O=P(32,"a-z","A-Z"),j=P(32,"a-z","A-Z"),q=new Date(Date.now()+r.accessTokenExpiresIn*1e3),je=new Date(Date.now()+r.refreshTokenExpiresIn*1e3);return await o.context.adapter.create({model:t.oauthAccessToken,data:{accessToken:O,refreshToken:j,accessTokenExpiresAt:q,refreshTokenExpiresAt:je,clientId:i.toString(),userId:U.userId,scopes:U.scopes,createdAt:new Date,updatedAt:new Date}}),o.json({access_token:O,token_type:"bearer",expires_in:r.accessTokenExpiresIn,refresh_token:j,scope:U.scopes})}if(!a)throw new b.APIError("BAD_REQUEST",{error_description:"code is required",error:"invalid_request"});if(e.requirePKCE&&!p)throw new b.APIError("BAD_REQUEST",{error_description:"code verifier is missing",error:"invalid_request"});let u=await o.context.internalAdapter.findVerificationValue(a.toString());if(!u)throw new b.APIError("UNAUTHORIZED",{error_description:"invalid code",error:"invalid_grant"});if(u.expiresAt<new Date)throw await o.context.internalAdapter.deleteVerificationValue(u.id),new b.APIError("UNAUTHORIZED",{error_description:"code expired",error:"invalid_grant"});if(await o.context.internalAdapter.deleteVerificationValue(u.id),!i||!s)throw new b.APIError("UNAUTHORIZED",{error_description:"client_id and client_secret are required",error:"invalid_client"});if(!c)throw new b.APIError("BAD_REQUEST",{error_description:"grant_type is required",error:"invalid_request"});if(c!=="authorization_code")throw new b.APIError("BAD_REQUEST",{error_description:"grant_type must be 'authorization_code'",error:"unsupported_grant_type"});if(!d)throw new b.APIError("BAD_REQUEST",{error_description:"redirect_uri is required",error:"invalid_request"});let y=await o.context.adapter.findOne({model:t.oauthClient,where:[{field:"clientId",value:i.toString()}]}).then(U=>U?{...U,redirectURLs:U.redirectURLs.split(","),metadata:U.metadata?JSON.parse(U.metadata):{}}:null);if(!y)throw new b.APIError("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(y.disabled)throw new b.APIError("UNAUTHORIZED",{error_description:"client is disabled",error:"invalid_client"});if(!(y.clientSecret===s.toString()))throw new b.APIError("UNAUTHORIZED",{error_description:"invalid client_secret",error:"invalid_client"});let f=JSON.parse(u.value);if(f.clientId!==i.toString())throw new b.APIError("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(f.redirectURI!==d.toString())throw new b.APIError("UNAUTHORIZED",{error_description:"invalid redirect_uri",error:"invalid_client"});if(f.codeChallenge&&!p)throw new b.APIError("BAD_REQUEST",{error_description:"code verifier is missing",error:"invalid_request"});if((f.codeChallengeMethod==="plain"?p:await(0,Bt.createHash)("SHA-256","base64urlnopad").digest(p))!==f.codeChallenge)throw new b.APIError("UNAUTHORIZED",{error_description:"code verification failed",error:"invalid_request"});let N=f.scope;await o.context.internalAdapter.deleteVerificationValue(a.toString());let W=P(32,"a-z","A-Z"),I=P(32,"A-Z","a-z"),_=new Date(Date.now()+r.accessTokenExpiresIn*1e3),me=new Date(Date.now()+r.refreshTokenExpiresIn*1e3);await o.context.adapter.create({model:t.oauthAccessToken,data:{accessToken:W,refreshToken:I,accessTokenExpiresAt:_,refreshTokenExpiresAt:me,clientId:i.toString(),userId:f.userId,scopes:N.join(" "),createdAt:new Date,updatedAt:new Date}});let A=await o.context.internalAdapter.findUserById(f.userId);if(!A)throw new b.APIError("UNAUTHORIZED",{error_description:"user not found",error:"invalid_grant"});let de={alg:"HS256",key:await qt.subtle.generateKey({name:"HMAC",hash:"SHA-256"},!0,["sign","verify"])},Re={given_name:A.name.split(" ")[0],family_name:A.name.split(" ")[1],name:A.name,profile:A.image,updated_at:A.updatedAt.toISOString()},he={email:A.email,email_verified:A.emailVerified},le={...N.includes("profile")?Re:{},...N.includes("email")?he:{}},ke=await new Vt.SignJWT({sub:A.id,aud:i.toString(),iat:Date.now(),auth_time:o.context.session?.session.createdAt.getTime(),nonce:n.nonce,acr:"urn:mace:incommon:iap:silver",...le}).setProtectedHeader({alg:de.alg}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r.accessTokenExpiresIn).sign(de.key);return o.json({access_token:W,token_type:"Bearer",expires_in:r.accessTokenExpiresIn,refresh_token:N.includes("offline_access")?I:void 0,scope:N.join(" "),id_token:N.includes("openid")?ke:void 0},{headers:{"Cache-Control":"no-store",Pragma:"no-cache"}})}),oAuth2userInfo:g("/oauth2/userinfo",{method:"GET",metadata:{isAction:!1}},async o=>{if(!o.request)throw new b.APIError("UNAUTHORIZED",{error_description:"request not found",error:"invalid_request"});let n=o.request.headers.get("authorization");if(!n)throw new b.APIError("UNAUTHORIZED",{error_description:"authorization header not found",error:"invalid_request"});let i=n.replace("Bearer ",""),s=await o.context.adapter.findOne({model:t.oauthAccessToken,where:[{field:"accessToken",value:i}]});if(!s)throw new b.APIError("UNAUTHORIZED",{error_description:"invalid access token",error:"invalid_token"});if(s.accessTokenExpiresAt<new Date)throw new b.APIError("UNAUTHORIZED",{error_description:"The Access Token expired",error:"invalid_token"});let c=await o.context.internalAdapter.findUserById(s.userId);if(!c)throw new b.APIError("UNAUTHORIZED",{error_description:"user not found",error:"invalid_token"});let a=s.scopes.split(" "),d={email:a.includes("email")?c.email:void 0,name:a.includes("profile")?c.name:void 0,picture:a.includes("profile")?c.image:void 0,given_name:a.includes("profile")?c.name.split(" ")[0]:void 0,family_name:a.includes("profile")?c.name.split(" ")[1]:void 0,email_verified:a.includes("email")?c.emailVerified:void 0};return o.json(d)}),registerOAuthApplication:g("/oauth2/register",{method:"POST",body:D.z.object({name:D.z.string(),icon:D.z.string().optional(),metadata:D.z.record(D.z.any()).optional(),redirectURLs:D.z.array(D.z.string())})},async o=>{let n=o.body,i=await M(o);if(!i&&!e.allowDynamicClientRegistration)throw new b.APIError("UNAUTHORIZED",{message:"Unauthorized"});let s=e.generateClientId?.()||P(32,"a-z","A-Z"),c=e.generateClientSecret?.()||P(32,"a-z","A-Z"),a=await o.context.adapter.create({model:t.oauthClient,data:{name:n.name,icon:n.icon,metadata:n.metadata?JSON.stringify(n.metadata):null,clientId:s,clientSecret:c,redirectURLs:n.redirectURLs.join(","),type:"web",authenticationScheme:"client_secret",disabled:!1,userId:i?.session.userId,createdAt:new Date,updatedAt:new Date}});return o.json({...a,redirectURLs:a.redirectURLs.split(","),metadata:a.metadata?JSON.parse(a.metadata):null})}),getOAuthClient:g("/oauth2/client/:id",{method:"GET",use:[L]},async o=>{let n=await o.context.adapter.findOne({model:t.oauthClient,where:[{field:"clientId",value:o.params.id}]});if(!n)throw new b.APIError("NOT_FOUND",{error_description:"client not found",error:"not_found"});return o.json({clientId:n.clientId,name:n.name,icon:n.icon})})},schema:$t}};0&&(module.exports={oidcProvider});
