"use strict";var Ie=Object.defineProperty;var Qt=Object.getOwnPropertyDescriptor;var Zt=Object.getOwnPropertyNames;var Yt=Object.prototype.hasOwnProperty;var Xt=(e,t)=>{for(var r in t)Ie(e,r,{get:t[r],enumerable:!0})},er=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Zt(t))!Yt.call(e,n)&&n!==r&&Ie(e,n,{get:()=>t[n],enumerable:!(o=Qt(t,n))||o.enumerable});return e};var tr=e=>er(Ie({},"__esModule",{value:!0}),e);var ko={};Xt(ko,{getPasskeyActions:()=>Wt,passkey:()=>Ro,passkeyClient:()=>Ao});module.exports=tr(ko);var te=require("@simplewebauthn/server"),I=require("better-call");var Je=require("@better-auth/utils/random"),re=(0,Je.createRandomStringGenerator)("a-z","0-9","A-Z","-_");var L=require("zod");var oe=require("better-call"),Ke=(0,oe.createMiddleware)(async()=>({})),me=(0,oe.createMiddlewareCreator)({use:[Ke,(0,oe.createMiddleware)(async()=>({}))]}),g=(0,oe.createEndpointCreator)({use:[Ke]});var ue=require("better-call");var Xe=require("better-call");function xe(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function rr(e){let t="";for(let r=0;r<e.length;r++)t+=xe(e[r]);return t}function Qe(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Qe(l,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=rr(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let s=t?`${o}+?`:"",a=t?`${o}*?`:"",c=t?e.split(r):[e],i="";for(let d=0;d<c.length;d++){let l=c[d],p=c[d+1],u="";if(!(!l&&d>0)){if(t&&(d===c.length-1?u=a:p!=="**"?u=s:u=""),t&&l==="**"){u&&(i+=d===0?"":u,i+=`(?:${n}*?${u})*?`);continue}for(let y=0;y<l.length;y++){let f=l[y];f==="\\"?y<l.length-1&&(i+=xe(l[y+1]),y++):f==="?"?i+=n:f==="*"?i+=`${n}*?`:i+=xe(f)}i+=u}}return i}function or(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Le(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Qe(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=or.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}var Ae=Object.create(null),ge=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?Ae:globalThis),Re=new Proxy(Ae,{get(e,t){return ge()[t]??Ae[t]},has(e,t){let r=ge();return t in r||t in Ae},set(e,t,r){let o=ge(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ge(!0);return delete r[t],!0},ownKeys(){let e=ge(!0);return Object.keys(e)}});function nr(e){return e?e!=="false":!1}var De=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Ce=De==="dev"||De==="development",sr=De==="test"||nr(Re.TEST);var F=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Ze(e){try{return new URL(e).origin}catch{return null}}function Ye(e){return e.includes("://")?new URL(e).host:e}var ir=me(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",s=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,c=r?.currentURL,i=t?.errorCallbackURL,d=t?.newUserCallbackURL,l=o.trustedOrigins,p=e.headers?.has("cookie"),u=(f,R)=>f.startsWith("/")?!1:R.includes("*")?Le(R)(Ye(f)):f.startsWith(R),y=(f,R)=>{if(!f)return;if(!l.some(C=>u(f,C)||f?.startsWith("/")&&R!=="origin"&&!f.includes(":")))throw e.context.logger.error(`Invalid ${R}: ${f}`),e.context.logger.info(`If it's a valid URL, please add ${f} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Xe.APIError("FORBIDDEN",{message:`Invalid ${R}`})};p&&!e.context.options.advanced?.disableCSRFCheck&&y(n,"origin"),s&&y(s,"callbackURL"),a&&y(a,"redirectURL"),c&&y(c,"currentURL"),i&&y(i,"errorCallbackURL"),d&&y(a,"newUserCallbackURL")});var U=require("better-call"),T=require("zod");var Z=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var et=require("@better-auth/utils/base64");var tt=require("@better-auth/utils/hmac");async function Ne(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=et.base64Url.encode(JSON.stringify({session:t,expiresAt:Z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,tt.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new F("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function x(e,t,r,o){let n=e.context.authCookies.sessionToken.options,s=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:s,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ne(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function M(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var ar=Object.defineProperty,cr=Object.defineProperties,dr=Object.getOwnPropertyDescriptors,rt=Object.getOwnPropertySymbols,lr=Object.prototype.hasOwnProperty,ur=Object.prototype.propertyIsEnumerable,ot=(e,t,r)=>t in e?ar(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ne=(e,t)=>{for(var r in t||(t={}))lr.call(t,r)&&ot(e,r,t[r]);if(rt)for(var r of rt(t))ur.call(t,r)&&ot(e,r,t[r]);return e},se=(e,t)=>cr(e,dr(t)),pr=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},fr=async(e,t)=>{var r,o,n,s,a,c;let i=t||{},d={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:i,hooks:d};for(let l of t?.plugins||[]){if(l.init){let p=await((r=l.init)==null?void 0:r.call(l,e.toString(),t));i=p.options||i,e=p.url}d.onRequest.push((o=l.hooks)==null?void 0:o.onRequest),d.onResponse.push((n=l.hooks)==null?void 0:n.onResponse),d.onSuccess.push((s=l.hooks)==null?void 0:s.onSuccess),d.onError.push((a=l.hooks)==null?void 0:a.onError),d.onRetry.push((c=l.hooks)==null?void 0:c.onRetry)}return{url:e,options:i,hooks:d}},nt=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},mr=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function gr(e){if(typeof e=="number")return new nt({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new nt(e);case"exponential":return new mr(e);default:throw new Error("Invalid retry strategy")}}var hr=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),n=r(e.auth.password);if(!o||!n)return t;t.authorization=`Basic ${btoa(`${o}:${n}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},at=["get","post","put","patch","delete"];var yr=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function wr(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return yr.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function br(e){try{return JSON.parse(e),!0}catch{return!1}}function ct(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function st(e){try{return JSON.parse(e)}catch{return e}}function it(e){return typeof e=="function"}function Ar(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&it(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&it(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function Rr(e){let t=new Headers(e?.headers),r=hr(e);for(let[o,n]of Object.entries(r||{}))t.set(o,n);if(!t.has("content-type")){let o=Er(e?.body);o&&t.set("content-type",o)}return t}function Er(e){return ct(e)?"application/json":null}function kr(e){if(!e?.body)return null;let t=new Headers(e?.headers);return ct(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function Tr(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return at.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function _r(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function Or(e,t){let{baseURL:r,params:o,query:n}=t||{query:{},params:{},baseURL:""},s=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!s)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let p=e.toString().split("@")[1].split("/")[0];at.includes(p)&&(e=e.replace(`@${p}/`,"/"))}s.endsWith("/")||(s+="/");let[a,c]=e.replace(s,"").split("?"),i=new URLSearchParams(c);for(let[p,u]of Object.entries(n||{}))i.set(p,String(u));if(o)if(Array.isArray(o)){let p=a.split("/").filter(u=>u.startsWith(":"));for(let[u,y]of p.entries()){let f=o[u];a=a.replace(y,f)}}else for(let[p,u]of Object.entries(o))a=a.replace(`:${p}`,String(u));a=a.split("/").map(encodeURIComponent).join("/"),a.startsWith("/")&&(a=a.slice(1));let d=i.size>0?`?${i}`.replace(/\+/g,"%20"):"";return new URL(`${a}${d}`,s)}var b=async(e,t)=>{var r,o,n,s,a,c,i,d;let{hooks:l,url:p,options:u}=await fr(e,t),y=Ar(u),f=new AbortController,R=(r=u.signal)!=null?r:f.signal,Q=Or(p,u),C=kr(u),$=Rr(u),S=Tr(p,u),w=se(ne({},u),{url:Q,headers:$,body:C,method:S,signal:R});for(let N of l.onRequest)if(N){let v=await N(w);v instanceof Object&&(w=v)}("pipeTo"in w&&typeof w.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in w||(w.duplex="half"));let{clearTimeout:Ue}=_r(u,f),E=await y(w.url,w);Ue();let be={response:E,request:w};for(let N of l.onResponse)if(N){let v=await N(se(ne({},be),{response:(n=t?.hookOptions)!=null&&n.cloneResponse?E.clone():E}));v instanceof Response?E=v:v instanceof Object&&(E=v.response)}if(E.ok){if(!(w.method!=="HEAD"))return{data:"",error:null};let v=wr(E),G={data:"",response:E,request:w};if(v==="json"||v==="text"){let W=await E.text(),Kt=await((s=w.jsonParser)!=null?s:st)(W);G.data=Kt}else G.data=await E[v]();w?.output&&w.output&&!w.disableValidation&&(G.data=w.output.parse(G.data));for(let W of l.onSuccess)W&&await W(se(ne({},G),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?E.clone():E}));return t?.throw?G.data:{data:G.data,error:null}}let ve=(c=t?.jsonParser)!=null?c:st,We=await E.text(),Pe=br(We)?await ve(We):{},Jt={response:E,request:w,error:se(ne({},Pe),{status:E.status,statusText:E.statusText})};for(let N of l.onError)N&&await N(se(ne({},Jt),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?E.clone():E}));if(t?.retry){let N=gr(t.retry),v=(d=t.retryAttempt)!=null?d:0;if(await N.shouldAttemptRetry(v,E)){for(let W of l.onRetry)W&&await W(be);let G=N.getDelay(v);return await new Promise(W=>setTimeout(W,G)),await b(e,se(ne({},t),{retryAttempt:v+1}))}}if(t?.throw)throw new pr(E.status,E.statusText,Pe);return{data:null,error:se(ne({},Pe),{status:E.status,statusText:E.statusText})}};var gt=require("better-call"),Y=require("jose");var dt=require("@better-auth/utils/hash"),lt=require("@better-auth/utils/base64");async function ut(e){let t=await(0,dt.createHash)("SHA-256").digest(e);return lt.base64Url.encode(new Uint8Array(t),{padding:!1})}function Ee(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?Z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function k({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:s,claims:a,redirectURI:c,duration:i}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",s.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),n){let l=await ut(n);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",l)}if(a){let l=a.reduce((p,u)=>(p[u]=null,p),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return i&&d.searchParams.set("duration",i),d}var Sr=require("jose");async function A({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:s}){let a=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),s==="basic"){let p=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${p}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:i,error:d}=await b(n,{method:"POST",body:a,headers:c});if(d)throw d;return Ee(i)}var q=require("zod"),Be=require("better-call");var Lr=require("@better-auth/utils/hash"),Dr=require("@noble/ciphers/chacha"),je=require("@noble/ciphers/utils"),Cr=require("@noble/ciphers/webcrypto");var vr=require("@better-auth/utils/hash");var pt=require("jose");async function ft(e,t,r=3600){return await new pt.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}var Pr=require("@noble/hashes/scrypt"),Ir=require("uncrypto"),xr=require("@better-auth/utils/hex");async function ke(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Ze(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Be.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=re(128),n=re(32),s=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:s,identifier:n,expiresAt:a});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Be.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function mt(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=q.z.object({callbackURL:q.z.string(),codeVerifier:q.z.string(),errorURL:q.z.string().optional(),newUserURL:q.z.string().optional(),expiresAt:q.z.number(),link:q.z.object({email:q.z.string(),userId:q.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var ht=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let s=o||["email","name"];return e.scope&&s.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${s.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>A({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=(0,Y.decodeProtectedHeader)(r),{kid:s,alg:a}=n;if(!s||!a)return!1;let c=await Nr(s),{payload:i}=await(0,Y.jwtVerify)(r,c,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{i[d]!==void 0&&(i[d]=!!i[d])}),o&&i.nonce!==o?!1:!!i},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,Y.decodeJwt)(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...s},data:o}}}},Nr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await b(`${t}${r}`);if(!o?.keys)throw new gt.APIError("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(s=>s.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await(0,Y.importJWK)(n,n.alg)};var yt=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let s=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${s}.png`}else{let s=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${s}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}});var wt=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await k({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}});var bt=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:s}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),k({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:s})},validateAuthorizationCode:async({code:r,redirectURI:o})=>A({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let s=!1,{data:a}=await b("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(i=>i.primary)??a[0])?.email,s=a.find(i=>i.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:s,...c},data:o}}}};var Ve=["info","success","warn","error","debug"];function jr(e,t){return Ve.indexOf(t)<=Ve.indexOf(e)}var z={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Br={info:z.fg.blue,success:z.fg.green,warn:z.fg.yellow,error:z.fg.red,debug:z.fg.magenta},Vr=(e,t)=>{let r=new Date().toISOString();return`${z.dim}${r}${z.reset} ${Br[e]}${e.toUpperCase()}${z.reset} ${z.bright}[Better Auth]:${z.reset} ${t}`},$r=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(n,s,a=[])=>{if(!t||!jr(r,n))return;let c=Vr(n,s);if(!e||typeof e.log!="function"){n==="error"?console.error(c,...a):n==="warn"?console.warn(c,...a):console.log(c,...a);return}e.log(n==="success"?"info":n,c,...a)};return Object.fromEntries(Ve.map(n=>[n,(...[s,...a])=>o(n,s,a)]))},B=$r();var At=require("jose"),Rt=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw B.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new F("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new F("codeVerifier is required for Google");let s=r||["email","profile","openid"];e.scope&&s.push(...e.scope);let a=await k({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:s,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await b(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,At.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});var Et=require("jose"),kt=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let s=n.scopes||["openid","profile","email","User.Read"];return e.scope&&s.push(...e.scope),k({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:s,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:s,redirectURI:a}){return A({code:n,codeVerifier:s,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let s=(0,Et.decodeJwt)(n.idToken),a=e.profilePhotoSize||48;await b(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(i){if(!(e.disableProfilePhoto||!i.response.ok))try{let l=await i.response.clone().arrayBuffer(),p=Buffer.from(l).toString("base64");s.picture=`data:image/jpeg;base64, ${p}`}catch(d){B.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,image:s.picture,emailVerified:!0,...c},data:s}}}};var Tt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let s=r||["user-read-email"];return e.scope&&s.push(...e.scope),k({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:s,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}});var ie={isAction:!1};var _t=require("@better-auth/utils/random"),he=e=>(0,_t.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var Ot=require("jose"),St=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),k({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return B.error("No idToken found in token"),null;let o=(0,Ot.decodeJwt)(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}});var Ut=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),k({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}});var vt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:n,redirectURI:s})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await k({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:s,codeVerifier:n})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>await A({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...s},data:o}}}};var Pt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:n,redirectURI:s})=>{let a=n||["profile","email","openid"];return e.scope&&a.push(...e.scope),await k({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:s})},validateAuthorizationCode:async({code:o,redirectURI:n})=>await A({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:n,error:s}=await b("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(s)return null;let a=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...a},data:n}}}};var $e=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Fr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:$e(`${t}/oauth/authorize`),tokenEndpoint:$e(`${t}/oauth/token`),userinfoEndpoint:$e(`${t}/api/v4/user`)}},It=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Fr(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:async({state:a,scopes:c,codeVerifier:i,redirectURI:d})=>{let l=c||["read_user"];return e.scope&&l.push(...e.scope),await k({id:n,options:e,authorizationEndpoint:t,scopes:l,state:a,redirectURI:d,codeVerifier:i})},validateAuthorizationCode:async({code:a,redirectURI:c,codeVerifier:i})=>A({code:a,redirectURI:e.redirectURI||c,options:e,codeVerifier:i,tokenEndpoint:r}),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:c,error:i}=await b(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(i||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var xt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),k({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:s,error:a}=await b("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(a)throw a;return Ee(s)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}});var Lt=e=>({id:"roblox",name:"Roblox",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["openid","profile"];return e.scope&&n.push(...e.scope),new URL(`https://apis.roblox.com/oauth/v1/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"select_account+consent"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://apis.roblox.com/oauth/v1/token",authentication:"post"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://apis.roblox.com/oauth/v1/userinfo",{headers:{authorization:`Bearer ${t.accessToken}`}});return o?null:{user:{id:r.sub,name:r.nickname||r.preferred_username||"",image:r.picture,email:"",emailVerified:!0},data:{...r}}}});var Dt=require("zod"),Mr={apple:ht,discord:yt,facebook:wt,github:bt,microsoft:kt,google:Rt,spotify:Tt,twitch:St,twitter:Ut,dropbox:vt,linkedin:Pt,gitlab:It,reddit:xt,roblox:Lt},Fe=Object.keys(Mr),Ct=Dt.z.enum(Fe,{description:"OAuth2 provider to use"});var j=require("zod");var ae=require("better-call");var H=require("better-call");var X=require("zod");function Nt(e){try{return JSON.parse(e)}catch{return null}}var m={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var jt=require("@better-auth/utils/hmac"),Bt=require("@better-auth/utils/base64"),Vt=require("@better-auth/utils/binary"),$t=()=>g("/get-session",{method:"GET",query:X.z.optional(X.z.object({disableCookieCache:X.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(X.z.string().transform(e=>e==="true")).optional(),disableRefresh:X.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Nt(Vt.binary.decode(Bt.base64.decode(r))):null;if(o&&!await(0,jt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return M(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let u=e.context.authCookies.sessionData.name;e.setCookie(u,"",{maxAge:0})}else return e.json(l)}let s=await e.context.internalAdapter.findSession(t);if(e.context.session=s,!s||s.session.expiresAt<new Date)return M(e),s&&await e.context.internalAdapter.deleteSession(s.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(s);let a=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(s.session.expiresAt.valueOf()-a*1e3+c*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(s.session.token,{expiresAt:Z(e.context.sessionConfig.expiresIn,"sec")});if(!l)return M(e),e.json(null,{status:401});let p=(l.expiresAt.valueOf()-Date.now())/1e3;return await x(e,{session:l,user:s.user},!1,{maxAge:p}),e.json({session:l,user:s.user})}return await Ne(e,s),e.json(s)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new H.APIError("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION})}}),J=async(e,t)=>{if(e.context.session)return e.context.session;let r=await $t()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},P=me(async e=>{let t=await J(e);if(!t?.session)throw new H.APIError("UNAUTHORIZED");return{session:t}}),Me=me(async e=>{let t=await J(e);if(!t?.session)throw new H.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new H.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var qr=g("/revoke-session",{method:"POST",body:X.z.object({token:X.z.string({description:"The token to revoke"})}),use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new H.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new H.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new H.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),zr=g("/revoke-sessions",{method:"POST",use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new H.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Hr=g("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[P],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new H.APIError("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(s=>s.expiresAt>new Date).filter(s=>s.token!==e.context.session.session.token);return await Promise.all(n.map(s=>e.context.internalAdapter.deleteSession(s.token))),e.json({status:!0})});var Ft=require("jose");async function K(e,t,r){return await ft({email:t.toLowerCase(),updateTo:r},e)}async function Gr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ae.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await K(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var Wr=g("/send-verification-email",{method:"POST",query:j.z.object({currentURL:j.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:j.z.object({email:j.z.string({description:"The email to send the verification email to"}).email(),callbackURL:j.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ae.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ae.APIError("BAD_REQUEST",{message:m.USER_NOT_FOUND});return await Gr(e,r.user),e.json({status:!0})}),Jr=g("/verify-email",{method:"GET",query:j.z.object({token:j.z.string({description:"The token to verify the email"}),callbackURL:j.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new ae.APIError("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await(0,Ft.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let s=j.z.object({email:j.z.string().email(),updateTo:j.z.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(s.email);if(!a)return t("user_not_found");if(s.updateTo){let c=await J(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==s.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let i=await e.context.internalAdapter.updateUserByEmail(s.email,{email:s.updateTo,emailVerified:!1}),d=await K(e.context.secret,s.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(s.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let c=await J(e);if(!c||c.user.email!==s.email){let i=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!i)throw new ae.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await x(e,{session:i,user:a.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function Te(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(i=>{throw B.error(`Better auth was unable to query your database.
Error: `,i),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),s=n?.user,a=!s;if(n){let i=n.accounts.find(d=>d.providerId===r.providerId);if(i){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,p])=>p!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(i.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Ce&&B.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(p){return B.error("Unable to link account",p),{error:"unable to link account",data:null}}}}else try{if(s=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(i=>i?.user),!t.emailVerified&&s&&e.context.options.emailVerification?.sendOnSignUp){let i=await K(e.context.secret,s.email),d=`${e.context.baseURL}/verify-email?token=${i}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:s,url:d,token:i},e.request)}}catch(i){return i instanceof qe.APIError?{error:i.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!s)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(s.id,e.request);return c?{data:{session:c,user:s},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}var Kr=g("/sign-in/social",{method:"POST",query:T.z.object({currentURL:T.z.string().optional()}).optional(),body:T.z.object({callbackURL:T.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.z.string().optional(),errorCallbackURL:T.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Ct,disableRedirect:T.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.z.optional(T.z.object({token:T.z.string({description:"ID token from the provider"}),nonce:T.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.z.string({description:"Access token from the provider"}).optional(),refreshToken:T.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(s=>s.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:m.ID_TOKEN_NOT_SUPPORTED});let{token:s,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(s,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:m.INVALID_TOKEN});let i=await t.getUserInfo({idToken:s,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!i||!i?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:m.FAILED_TO_GET_USER_INFO});if(!i.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:m.USER_EMAIL_NOT_FOUND});let d=await Te(e,{userInfo:{email:i.user.email,id:i.user.id,name:i.user.name||"",image:i.user.image,emailVerified:i.user.emailVerified||!1},account:{providerId:t.id,accountId:i.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new U.APIError("UNAUTHORIZED",{message:d.error});return await x(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ke(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),Qr=g("/sign-in/email",{method:"POST",body:T.z.object({email:T.z.string({description:"Email of the user"}),password:T.z.string({description:"Password of the user"}),callbackURL:T.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new U.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.z.string().email().safeParse(t).success)throw new U.APIError("BAD_REQUEST",{message:m.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let s=n.accounts.find(d=>d.providerId==="credential");if(!s)throw e.context.logger.error("Credential account not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let a=s?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new U.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new U.APIError("UNAUTHORIZED",{message:m.EMAIL_NOT_VERIFIED});let d=await K(e.context.secret,n.user.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:l,token:d},e.request),new U.APIError("FORBIDDEN",{message:m.EMAIL_NOT_VERIFIED})}let i=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!i)throw e.context.logger.error("Failed to create session"),new U.APIError("UNAUTHORIZED",{message:m.FAILED_TO_CREATE_SESSION});return await x(e,{session:i,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},token:i.token,redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var ce=require("zod");var _e=ce.z.object({code:ce.z.string().optional(),error:ce.z.string().optional(),error_description:ce.z.string().optional(),state:ce.z.string().optional()}),Zr=g("/callback/:id",{method:["GET","POST"],body:_e.optional(),query:_e.optional(),metadata:ie},async e=>{let t;try{if(e.method==="GET")t=_e.parse(e.query);else if(e.method==="POST")t=_e.parse(e.body);else throw new Error("Unsupported method")}catch(S){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",S),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:s}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${s}`);let a=e.context.socialProviders.find(S=>S.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:i,link:d,errorURL:l,newUserURL:p}=await mt(e),u;try{u=await a.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(S){throw e.context.logger.error("",S),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let y=await a.getUserInfo(u).then(S=>S?.user);function f(S){let w=l||i||`${e.context.baseURL}/error`;throw w.includes("?")?w=`${w}&error=${S}`:w=`${w}?error=${S}`,e.redirect(w)}if(!y)return e.context.logger.error("Unable to get user info"),f("unable_to_get_user_info");if(!y.email&&a.id!=="roblox")return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),f("email_not_found");if(!i)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==y?.email?.toLowerCase()&&a.id!=="roblox")return f("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:a.id,accountId:y.id,accessToken:u.accessToken,refreshToken:u.refreshToken,accessTokenExpiresAt:u.accessTokenExpiresAt,scope:u.scopes?.join(","),image:y.image}))return f("unable_to_link_account");let w;try{w=i.toString()}catch{w=i}throw e.redirect(w)}let R=await Te(e,{userInfo:{...y,email:y.email||"",name:y.name||y.email||""},account:{providerId:a.id,accountId:y.id,...u,image:y.image,scope:u.scopes?.join(",")},callbackURL:i});if(R.error)return e.context.logger.error(R.error.split(" ").join("_")),f(R.error.split(" ").join("_"));let{session:Q,user:C}=R.data;await x(e,{session:Q,user:C});let $;try{$=(R.isRegister&&p||i).toString()}catch{$=R.isRegister&&p||i}throw e.redirect($)});var $i=require("zod");var Mt=require("better-call");var Yr=g("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw M(e),new Mt.APIError("BAD_REQUEST",{message:m.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),M(e),e.json({success:!0})});var D=require("zod");var de=require("better-call");function qt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,s])=>o.searchParams.set(n,s)),o.href}function Xr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,s])=>o.searchParams.set(n,s)),o.href}var eo=g("/forget-password",{method:"POST",body:D.z.object({email:D.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:D.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new de.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,s=Z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),a=he(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:s});let c=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:a},e.request),e.json({status:!0})}),to=g("/reset-password/:token",{method:"GET",query:D.z.object({callbackURL:D.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(qt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(qt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Xr(e.context,r,{token:t}))}),ro=g("/reset-password",{query:D.z.optional(D.z.object({token:D.z.string().optional(),currentURL:D.z.string().optional()})),method:"POST",body:D.z.object({newPassword:D.z.string({description:"The new password to set"}),token:D.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new de.APIError("BAD_REQUEST",{message:m.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new de.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});if(r.length>n)throw new de.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let s=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(s);if(!a||a.expiresAt<new Date)throw new de.APIError("BAD_REQUEST",{message:m.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let c=a.value,i=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(p=>p.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,i),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:i,accountId:c}),e.json({status:!0}))});var O=require("zod");var _=require("better-call");var h=require("zod"),oo=require("better-call"),Zi=h.z.object({id:h.z.string(),providerId:h.z.string(),accountId:h.z.string(),userId:h.z.string(),accessToken:h.z.string().nullish(),refreshToken:h.z.string().nullish(),idToken:h.z.string().nullish(),accessTokenExpiresAt:h.z.date().nullish(),refreshTokenExpiresAt:h.z.date().nullish(),scope:h.z.string().nullish(),password:h.z.string().nullish(),image:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),Yi=h.z.object({id:h.z.string(),email:h.z.string().transform(e=>e.toLowerCase()),emailVerified:h.z.boolean().default(!1),name:h.z.string(),image:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),Xi=h.z.object({id:h.z.string(),userId:h.z.string(),expiresAt:h.z.date(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),token:h.z.string(),ipAddress:h.z.string().nullish(),userAgent:h.z.string().nullish()}),ea=h.z.object({id:h.z.string(),value:h.z.string(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),expiresAt:h.z.date(),identifier:h.z.string()});function zt(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let n in e[r].fields){let s=t[r]?.fields?.[n];s&&(e[r].fields[n].fieldName=s)}}return e}var so=g("/change-password",{method:"POST",body:O.z.object({newPassword:O.z.string({description:"The new password to set"}),currentPassword:O.z.string({description:"The current password"}),revokeOtherSessions:O.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[P],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,s=e.context.password.config.minPasswordLength;if(t.length<s)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let i=(await e.context.internalAdapter.findAccounts(n.user.id)).find(u=>u.providerId==="credential"&&u.password);if(!i||!i.password)throw new _.APIError("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:i.password,password:r}))throw new _.APIError("BAD_REQUEST",{message:m.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(i.id,{password:d});let p=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let u=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!u)throw new _.APIError("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION});await x(e,{session:u,user:n.user}),p=u.token}return e.json({token:p})}),io=g("/set-password",{method:"POST",body:O.z.object({newPassword:O.z.string()}),metadata:{SERVER_ONLY:!0},use:[P]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(i=>i.providerId==="credential"&&i.password),c=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new _.APIError("BAD_REQUEST",{message:"user already has a password"})}),ao=g("/delete-user",{method:"POST",use:[P],body:O.z.object({callbackURL:O.z.string().optional(),password:O.z.string().optional(),token:O.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let s=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!s||!s.password)throw new _.APIError("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:s.password,password:e.body.password}))throw new _.APIError("BAD_REQUEST",{message:m.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),s=e.context.options.session.freshAge;if(Date.now()-n>s)throw new _.APIError("BAD_REQUEST",{message:m.SESSION_EXPIRED})}if(e.body.token)return await Ht({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=re(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let s=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:s,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),M(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ht=g("/delete-user/callback",{method:"GET",query:O.z.object({token:O.z.string(),callbackURL:O.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _.APIError("NOT_FOUND");let t=await J(e);if(!t)throw new _.APIError("NOT_FOUND",{message:m.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _.APIError("NOT_FOUND",{message:m.INVALID_TOKEN});if(r.value!==t.user.id)throw new _.APIError("NOT_FOUND",{message:m.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),M(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),co=g("/change-email",{method:"POST",query:O.z.object({currentURL:O.z.string().optional()}).optional(),body:O.z.object({newEmail:O.z.string({description:"The new email to set"}).email(),callbackURL:O.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[P],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await K(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var lo=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,uo=g("/error",{method:"GET",metadata:{...ie,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(lo(t),{headers:{"Content-Type":"text/html"}})});var po=g("/ok",{method:"GET",metadata:{...ie,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var fo=require("zod");var mo=require("better-call");var le=require("zod");var ze=require("better-call");var go=g("/list-accounts",{method:"GET",use:[P],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,accountId:o.accountId,provider:o.providerId})))}),ho=g("/link-social",{method:"POST",requireHeaders:!0,query:le.z.object({currentURL:le.z.string().optional()}).optional(),body:le.z.object({callbackURL:le.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:le.z.enum(Fe,{description:"The OAuth2 provider to use"})}),use:[P],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new ze.APIError("BAD_REQUEST",{message:m.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new ze.APIError("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});let s=await ke(e,{userId:t.user.id,email:t.user.email}),a=await n.createAuthorizationURL({state:s.state,codeVerifier:s.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:a.toString(),redirect:!0})});var pc=require("defu");var qe=require("better-call");var fe=require("@simplewebauthn/browser");var ye=Symbol("clean");var V=[],ee=0,Oe=4,yo=0,we=e=>{let t=[],r={get(){return r.lc||r.listen(()=>{})(),r.value},lc:0,listen(o){return r.lc=t.push(o),()=>{for(let s=ee+Oe;s<V.length;)V[s]===o?V.splice(s,Oe):s+=Oe;let n=t.indexOf(o);~n&&(t.splice(n,1),--r.lc||r.off())}},notify(o,n){yo++;let s=!V.length;for(let a of t)V.push(a,r.value,o,n);if(s){for(ee=0;ee<V.length;ee+=Oe)V[ee](V[ee+1],V[ee+2],V[ee+3]);V.length=0}},off(){},set(o){let n=r.value;n!==o&&(r.value=o,r.notify(n))},subscribe(o){let n=r.listen(o);return o(r.value),n},value:e};return process.env.NODE_ENV!=="production"&&(r[ye]=()=>{t=[],r.lc=0,r.off()}),r};var wo=5,pe=6,Se=10,bo=(e,t,r,o)=>(e.events=e.events||{},e.events[r+Se]||(e.events[r+Se]=o(n=>{e.events[r].reduceRight((s,a)=>(a(s),s),{shared:{},...n})})),e.events[r]=e.events[r]||[],e.events[r].push(t),()=>{let n=e.events[r],s=n.indexOf(t);n.splice(s,1),n.length||(delete e.events[r],e.events[r+Se](),delete e.events[r+Se])});var Gt=1e3,He=(e,t)=>bo(e,o=>{let n=t(o);n&&e.events[pe].push(n)},wo,o=>{let n=e.listen;e.listen=(...a)=>(!e.lc&&!e.active&&(e.active=!0,o()),n(...a));let s=e.off;if(e.events[pe]=[],e.off=()=>{s(),setTimeout(()=>{if(e.active&&!e.lc){e.active=!1;for(let a of e.events[pe])a();e.events[pe]=[]}},Gt)},process.env.NODE_ENV!=="production"){let a=e[ye];e[ye]=()=>{for(let c of e.events[pe])c();e.events[pe]=[],e.active=!1,a()}}return()=>{e.listen=n,e.off=s}});var Ge=(e,t,r,o)=>{let n=we({data:null,error:null,isPending:!0,isRefetching:!1}),s=()=>{let c=typeof o=="function"?o({data:n.get().data,error:n.get().error,isPending:n.get().isPending}):o;return r(t,{...c,async onSuccess(i){typeof window<"u"&&n.set({data:i.data,error:null,isPending:!1,isRefetching:!1}),await c?.onSuccess?.(i)},async onError(i){n.set({error:i.error,data:null,isPending:!1,isRefetching:!1}),await c?.onError?.(i)},async onRequest(i){let d=n.get();n.set({isPending:d.data===null,data:d.data,error:null,isRefetching:!0}),await c?.onRequest?.(i)}})};e=Array.isArray(e)?e:[e];let a=!1;for(let c of e)c.subscribe(()=>{a?s():He(n,()=>(s(),a=!0,()=>{n.off(),c.off()}))});return n};var Bc={true:!0,false:!1,null:null,undefined:void 0,nan:Number.NaN,infinity:Number.POSITIVE_INFINITY,"-infinity":Number.NEGATIVE_INFINITY};var Wt=(e,{$listPasskeys:t})=>({signIn:{passkey:async(n,s)=>{let a=await e("/passkey/generate-authenticate-options",{method:"POST",body:{email:n?.email}});if(!a.data)return a;try{let c=await(0,fe.startAuthentication)({optionsJSON:a.data,useBrowserAutofill:n?.autoFill}),i=await e("/passkey/verify-authentication",{body:{response:c},...n?.fetchOptions,...s,method:"POST"});if(!i.data)return i}catch{return{data:null,error:{message:"auth cancelled",status:400,statusText:"BAD_REQUEST"}}}}},passkey:{addPasskey:async(n,s)=>{let a=await e("/passkey/generate-register-options",{method:"GET"});if(!a.data)return a;try{let c=await(0,fe.startRegistration)({optionsJSON:a.data,useAutoRegister:n?.useAutoRegister}),i=await e("/passkey/verify-registration",{...n?.fetchOptions,...s,body:{response:c,name:n?.name},method:"POST"});if(!i.data)return i;t.set(Math.random())}catch(c){return c instanceof fe.WebAuthnError?c.code==="ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED"?{data:null,error:{message:"previously registered",status:400,statusText:"BAD_REQUEST"}}:c.code==="ERROR_CEREMONY_ABORTED"?{data:null,error:{message:"registration cancelled",status:400,statusText:"BAD_REQUEST"}}:{data:null,error:{message:c.message,status:400,statusText:"BAD_REQUEST"}}:{data:null,error:{message:c instanceof Error?c.message:"unknown error",status:500,statusText:"INTERNAL_SERVER_ERROR"}}}}},$Infer:{}}),Ao=()=>{let e=we();return{id:"passkey",$InferServerPlugin:{},getActions:t=>Wt(t,{$listPasskeys:e}),getAtoms(t){return{listPasskeys:Ge(e,"/passkey/list-user-passkeys",t,{method:"GET"}),$listPasskeys:e}},pathMethods:{"/passkey/register":"POST","/passkey/authenticate":"POST"},atomListeners:[{matcher(t){return t==="/passkey/verify-registration"||t==="/passkey/delete-passkey"||t==="/passkey/update-passkey"},signal:"_listPasskeys"}]}};var Ro=e=>{let t=Re.BETTER_AUTH_URL,r=e?.rpID||t?.replace("http://","").replace("https://","").split(":")[0]||"localhost";if(!r)throw new F("passkey rpID not found. Please provide a rpID in the options or set the BETTER_AUTH_URL environment variable.");let o={origin:null,...e,rpID:r,advanced:{webAuthnChallengeCookie:"better-auth-passkey",...e?.advanced}},n=new Date(Date.now()+1e3*60*5),s=new Date,a=Math.floor((n.getTime()-s.getTime())/1e3),c={CHALLENGE_NOT_FOUND:"Challenge not found",YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY:"You are not allowed to register this passkey",FAILED_TO_VERIFY_REGISTRATION:"Failed to verify registration",PASSKEY_NOT_FOUND:"Passkey not found",AUTHENTICATION_FAILED:"Authentication failed",UNABLE_TO_CREATE_SESSION:"Unable to create session",FAILED_TO_UPDATE_PASSKEY:"Failed to update passkey"};return{id:"passkey",endpoints:{generatePasskeyRegistrationOptions:g("/passkey/generate-register-options",{method:"GET",use:[Me],metadata:{client:!1,openapi:{description:"Generate registration options for a new passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{challenge:{type:"string"},rp:{type:"object",properties:{name:{type:"string"},id:{type:"string"}}},user:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"}}},pubKeyCredParams:{type:"array",items:{type:"object",properties:{type:{type:"string"},alg:{type:"number"}}}},timeout:{type:"number"},excludeCredentials:{type:"array",items:{type:"object",properties:{id:{type:"string"},type:{type:"string"},transports:{type:"array",items:{type:"string"}}}}},authenticatorSelection:{type:"object",properties:{authenticatorAttachment:{type:"string"},requireResidentKey:{type:"boolean"},userVerification:{type:"string"}}},attestation:{type:"string"},extensions:{type:"object"}}}}}}}}}},async i=>{let d=i.context.session,l=await i.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:d.user.id}]}),p=new Uint8Array(Buffer.from(re(32,"a-z","0-9"))),u;u=await(0,te.generateRegistrationOptions)({rpName:o.rpName||i.context.appName,rpID:o.rpID,userID:p,userName:d.user.email||d.user.id,attestationType:"none",excludeCredentials:l.map(f=>({id:f.credentialID,transports:f.transports?.split(",")})),authenticatorSelection:{residentKey:"preferred",userVerification:"preferred",authenticatorAttachment:"platform"}});let y=he(32);return await i.setSignedCookie(o.advanced.webAuthnChallengeCookie,y,i.context.secret,{secure:!0,httpOnly:!0,sameSite:"lax",maxAge:a}),await i.context.internalAdapter.createVerificationValue({identifier:y,value:JSON.stringify({expectedChallenge:u.challenge,userData:{id:d.user.id}}),expiresAt:n}),i.json(u,{status:200})}),generatePasskeyAuthenticationOptions:g("/passkey/generate-authenticate-options",{method:"POST",body:L.z.object({email:L.z.string({description:"The email address of the user"}).optional()}).optional(),metadata:{openapi:{description:"Generate authentication options for a passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{challenge:{type:"string"},rp:{type:"object",properties:{name:{type:"string"},id:{type:"string"}}},user:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"}}},timeout:{type:"number"},allowCredentials:{type:"array",items:{type:"object",properties:{id:{type:"string"},type:{type:"string"},transports:{type:"array",items:{type:"string"}}}}},userVerification:{type:"string"},authenticatorSelection:{type:"object",properties:{authenticatorAttachment:{type:"string"},requireResidentKey:{type:"boolean"},userVerification:{type:"string"}}},extensions:{type:"object"}}}}}}}}}},async i=>{let d=await J(i),l=[];d&&(l=await i.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:d.user.id}]}));let p=await(0,te.generateAuthenticationOptions)({rpID:o.rpID,userVerification:"preferred",...l.length?{allowCredentials:l.map(f=>({id:f.credentialID,transports:f.transports?.split(",")}))}:{}}),u={expectedChallenge:p.challenge,userData:{id:d?.user.id||""}},y=he(32);return await i.setSignedCookie(o.advanced.webAuthnChallengeCookie,y,i.context.secret,{secure:!0,httpOnly:!0,sameSite:"lax",maxAge:a}),await i.context.internalAdapter.createVerificationValue({identifier:y,value:JSON.stringify(u),expiresAt:n}),i.json(p,{status:200})}),verifyPasskeyRegistration:g("/passkey/verify-registration",{method:"POST",body:L.z.object({response:L.z.any({description:"The response from the authenticator"}),name:L.z.string({description:"Name of the passkey"}).optional()}),use:[Me],metadata:{openapi:{description:"Verify registration of a new passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{$ref:"#/components/schemas/Passkey"}}}},400:{description:"Bad request"}}}}},async i=>{let d=e?.origin||i.headers?.get("origin")||"";if(!d)return i.json(null,{status:400});let l=i.body.response,p=await i.getSignedCookie(o.advanced.webAuthnChallengeCookie,i.context.secret);if(!p)throw new I.APIError("BAD_REQUEST",{message:c.CHALLENGE_NOT_FOUND});let u=await i.context.internalAdapter.findVerificationValue(p);if(!u)return i.json(null,{status:400});let{expectedChallenge:y,userData:f}=JSON.parse(u.value);if(f.id!==i.context.session.user.id)throw new I.APIError("UNAUTHORIZED",{message:c.YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY});try{let R=await(0,te.verifyRegistrationResponse)({response:l,expectedChallenge:y,expectedOrigin:d,expectedRPID:e?.rpID}),{verified:Q,registrationInfo:C}=R;if(!Q||!C)return i.json(null,{status:400});let{credentialDeviceType:$,credentialBackedUp:S,credential:w,credentialType:Ue}=C,E=Buffer.from(w.publicKey).toString("base64"),be={name:i.body.name,userId:f.id,id:i.context.generateId({model:"passkey"}),credentialID:w.id,publicKey:E,counter:w.counter,deviceType:$,transports:l.response.transports.join(","),backedUp:S,createdAt:new Date},ve=await i.context.adapter.create({model:"passkey",data:be});return i.json(ve,{status:200})}catch(R){throw console.log(R),new I.APIError("INTERNAL_SERVER_ERROR",{message:c.FAILED_TO_VERIFY_REGISTRATION})}}),verifyPasskeyAuthentication:g("/passkey/verify-authentication",{method:"POST",body:L.z.object({response:L.z.record(L.z.any())}),metadata:{openapi:{description:"Verify authentication of a passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"},user:{$ref:"#/components/schemas/User"}}}}}}}},$Infer:{body:{}}}},async i=>{let d=e?.origin||i.headers?.get("origin")||"";if(!d)throw new I.APIError("BAD_REQUEST",{message:"origin missing"});let l=i.body.response,p=await i.getSignedCookie(o.advanced.webAuthnChallengeCookie,i.context.secret);if(!p)throw new I.APIError("BAD_REQUEST",{message:c.CHALLENGE_NOT_FOUND});let u=await i.context.internalAdapter.findVerificationValue(p);if(!u)throw new I.APIError("BAD_REQUEST",{message:c.CHALLENGE_NOT_FOUND});let{expectedChallenge:y}=JSON.parse(u.value),f=await i.context.adapter.findOne({model:"passkey",where:[{field:"credentialID",value:l.id}]});if(!f)throw new I.APIError("UNAUTHORIZED",{message:c.PASSKEY_NOT_FOUND});try{let R=await(0,te.verifyAuthenticationResponse)({response:l,expectedChallenge:y,expectedOrigin:d,expectedRPID:o.rpID,credential:{id:f.credentialID,publicKey:new Uint8Array(Buffer.from(f.publicKey,"base64")),counter:f.counter,transports:f.transports?.split(",")},requireUserVerification:!1}),{verified:Q}=R;if(!Q)throw new I.APIError("UNAUTHORIZED",{message:c.AUTHENTICATION_FAILED});await i.context.adapter.update({model:"passkey",where:[{field:"id",value:f.id}],update:{counter:R.authenticationInfo.newCounter}});let C=await i.context.internalAdapter.createSession(f.userId,i.request);if(!C)throw new I.APIError("INTERNAL_SERVER_ERROR",{message:c.UNABLE_TO_CREATE_SESSION});let $=await i.context.internalAdapter.findUserById(f.userId);if(!$)throw new I.APIError("INTERNAL_SERVER_ERROR",{message:"User not found"});return await x(i,{session:C,user:$}),i.json({session:C},{status:200})}catch(R){throw i.context.logger.error("Failed to verify authentication",R),new I.APIError("BAD_REQUEST",{message:c.AUTHENTICATION_FAILED})}}),listPasskeys:g("/passkey/list-user-passkeys",{method:"GET",use:[P]},async i=>{let d=await i.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:i.context.session.user.id}]});return i.json(d,{status:200})}),deletePasskey:g("/passkey/delete-passkey",{method:"POST",body:L.z.object({id:L.z.string()}),use:[P]},async i=>(await i.context.adapter.delete({model:"passkey",where:[{field:"id",value:i.body.id}]}),i.json(null,{status:200}))),updatePasskey:g("/passkey/update-passkey",{method:"POST",body:L.z.object({id:L.z.string(),name:L.z.string()}),use:[P]},async i=>{let d=await i.context.adapter.findOne({model:"passkey",where:[{field:"id",value:i.body.id}]});if(!d)throw new I.APIError("NOT_FOUND",{message:c.PASSKEY_NOT_FOUND});if(d.userId!==i.context.session.user.id)throw new I.APIError("UNAUTHORIZED",{message:c.YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY});let l=await i.context.adapter.update({model:"passkey",where:[{field:"id",value:i.body.id}],update:{name:i.body.name}});if(!l)throw new I.APIError("INTERNAL_SERVER_ERROR",{message:c.FAILED_TO_UPDATE_PASSKEY});return i.json({passkey:l},{status:200})})},schema:zt(Eo,e?.schema),$ERROR_CODES:c}},Eo={passkey:{fields:{name:{type:"string",required:!1},publicKey:{type:"string",required:!0},userId:{type:"string",references:{model:"user",field:"id"},required:!0},credentialID:{type:"string",required:!0},counter:{type:"number",required:!0},deviceType:{type:"string",required:!0},backedUp:{type:"boolean",required:!0},transports:{type:"string",required:!1},createdAt:{type:"date",required:!1}}}};0&&(module.exports={getPasskeyActions,passkey,passkeyClient});
