"use strict";var Ae=Object.defineProperty;var Nt=Object.getOwnPropertyDescriptor;var Bt=Object.getOwnPropertyNames;var Vt=Object.prototype.hasOwnProperty;var zt=(e,t)=>{for(var r in t)Ae(e,r,{get:t[r],enumerable:!0})},Mt=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Bt(t))!Vt.call(e,i)&&i!==r&&Ae(e,i,{get:()=>t[i],enumerable:!(o=Nt(t,i))||o.enumerable});return e};var qt=e=>Mt(Ae({},"__esModule",{value:!0}),e);var oo={};zt(oo,{sso:()=>ro});module.exports=qt(oo);var w=require("zod");var le=require("better-call");var Be=require("better-call");var K=require("better-call"),De=(0,K.createMiddleware)(async()=>({})),ue=(0,K.createMiddlewareCreator)({use:[De,(0,K.createMiddleware)(async()=>({}))]}),y=(0,K.createEndpointCreator)({use:[De]});function Re(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function Ft(e){let t="";for(let r=0;r<e.length;r++)t+=Re(e[r]);return t}function Ce(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Ce(l,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=Ft(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=t?`${o}+?`:"",s=t?`${o}*?`:"",d=t?e.split(r):[e],a="";for(let c=0;c<d.length;c++){let l=d[c],u=d[c+1],p="";if(!(!l&&c>0)){if(t&&(c===d.length-1?p=s:u!=="**"?p=n:p=""),t&&l==="**"){p&&(a+=c===0?"":p,a+=`(?:${i}*?${p})*?`);continue}for(let f=0;f<l.length;f++){let g=l[f];g==="\\"?f<l.length-1&&(a+=Re(l[f+1]),f++):g==="?"?a+=i:g==="*"?a+=`${i}*?`:a+=Re(g)}a+=p}}return a}function Ht(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function ke(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ce(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=Ht.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}var ge=Object.create(null),pe=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ge:globalThis),je=new Proxy(ge,{get(e,t){return pe()[t]??ge[t]},has(e,t){let r=pe();return t in r||t in ge},set(e,t,r){let o=pe(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=pe(!0);return delete r[t],!0},ownKeys(){let e=pe(!0);return Object.keys(e)}});function Gt(e){return e?e!=="false":!1}var _e=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Ee=_e==="dev"||_e==="development",Wt=_e==="test"||Gt(je.TEST);var W=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function $e(e){try{return new URL(e).origin}catch{return null}}function Ne(e){return e.includes("://")?new URL(e).host:e}var Jt=ue(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,s=t?.redirectTo,d=r?.currentURL,a=t?.errorCallbackURL,c=t?.newUserCallbackURL,l=o.trustedOrigins,u=e.headers?.has("cookie"),p=(g,T)=>g.startsWith("/")?!1:T.includes("*")?ke(T)(Ne(g)):g.startsWith(T),f=(g,T)=>{if(!g)return;if(!l.some(j=>p(g,j)||g?.startsWith("/")&&T!=="origin"&&!g.includes(":")))throw e.context.logger.error(`Invalid ${T}: ${g}`),e.context.logger.info(`If it's a valid URL, please add ${g} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Be.APIError("FORBIDDEN",{message:`Invalid ${T}`})};u&&!e.context.options.advanced?.disableCSRFCheck&&f(i,"origin"),n&&f(n,"callbackURL"),s&&f(s,"redirectURL"),d&&f(d,"currentURL"),a&&f(a,"errorCallbackURL"),c&&f(s,"newUserCallbackURL")});var O=require("better-call"),U=require("zod");var J=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var Ve=require("@better-auth/utils/base64");var ze=require("@better-auth/utils/hmac");async function Ue(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Ve.base64Url.encode(JSON.stringify({session:t,expiresAt:J(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,ze.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new W("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function P(e,t,r,o){let i=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ue(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function B(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var Qt=Object.defineProperty,Zt=Object.defineProperties,Kt=Object.getOwnPropertyDescriptors,Me=Object.getOwnPropertySymbols,Yt=Object.prototype.hasOwnProperty,Xt=Object.prototype.propertyIsEnumerable,qe=(e,t,r)=>t in e?Qt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Y=(e,t)=>{for(var r in t||(t={}))Yt.call(t,r)&&qe(e,r,t[r]);if(Me)for(var r of Me(t))Xt.call(t,r)&&qe(e,r,t[r]);return e},X=(e,t)=>Zt(e,Kt(t)),ve=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},er=async(e,t)=>{var r,o,i,n,s,d;let a=t||{},c={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:c};for(let l of t?.plugins||[]){if(l.init){let u=await((r=l.init)==null?void 0:r.call(l,e.toString(),t));a=u.options||a,e=u.url}c.onRequest.push((o=l.hooks)==null?void 0:o.onRequest),c.onResponse.push((i=l.hooks)==null?void 0:i.onResponse),c.onSuccess.push((n=l.hooks)==null?void 0:n.onSuccess),c.onError.push((s=l.hooks)==null?void 0:s.onError),c.onRetry.push((d=l.hooks)==null?void 0:d.onRetry)}return{url:e,options:a,hooks:c}},Fe=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},tr=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function rr(e){if(typeof e=="number")return new Fe({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Fe(e);case"exponential":return new tr(e);default:throw new Error("Invalid retry strategy")}}var or=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),i=r(e.auth.password);if(!o||!i)return t;t.authorization=`Basic ${btoa(`${o}:${i}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},We=["get","post","put","patch","delete"];var ir=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function nr(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return ir.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function sr(e){try{return JSON.parse(e),!0}catch{return!1}}function Je(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function He(e){try{return JSON.parse(e)}catch{return e}}function Ge(e){return typeof e=="function"}function ar(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&Ge(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&Ge(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function dr(e){let t=new Headers(e?.headers),r=or(e);for(let[o,i]of Object.entries(r||{}))t.set(o,i);if(!t.has("content-type")){let o=cr(e?.body);o&&t.set("content-type",o)}return t}function cr(e){return Je(e)?"application/json":null}function lr(e){if(!e?.body)return null;let t=new Headers(e?.headers);return Je(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function ur(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return We.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function pr(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function fr(e,t){let{baseURL:r,params:o,query:i}=t||{query:{},params:{},baseURL:""},n=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!n)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let u=e.toString().split("@")[1].split("/")[0];We.includes(u)&&(e=e.replace(`@${u}/`,"/"))}n.endsWith("/")||(n+="/");let[s,d]=e.replace(n,"").split("?"),a=new URLSearchParams(d);for(let[u,p]of Object.entries(i||{}))a.set(u,String(p));if(o)if(Array.isArray(o)){let u=s.split("/").filter(p=>p.startsWith(":"));for(let[p,f]of u.entries()){let g=o[p];s=s.replace(f,g)}}else for(let[u,p]of Object.entries(o))s=s.replace(`:${u}`,String(p));s=s.split("/").map(encodeURIComponent).join("/"),s.startsWith("/")&&(s=s.slice(1));let c=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${s}${c}`,n)}var A=async(e,t)=>{var r,o,i,n,s,d,a,c;let{hooks:l,url:u,options:p}=await er(e,t),f=ar(p),g=new AbortController,T=(r=p.signal)!=null?r:g.signal,re=fr(u,p),j=lr(p),q=dr(p),R=ur(u,p),b=X(Y({},p),{url:re,headers:q,body:j,method:R,signal:T});for(let D of l.onRequest)if(D){let I=await D(b);I instanceof Object&&(b=I)}("pipeTo"in b&&typeof b.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in b||(b.duplex="half"));let{clearTimeout:$}=pr(p,g),_=await f(b.url,b);$();let me={response:_,request:b};for(let D of l.onResponse)if(D){let I=await D(X(Y({},me),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?_.clone():_}));I instanceof Response?_=I:I instanceof Object&&(_=I.response)}if(_.ok){if(!(b.method!=="HEAD"))return{data:"",error:null};let I=nr(_),F={data:"",response:_,request:b};if(I==="json"||I==="text"){let H=await _.text(),$t=await((n=b.jsonParser)!=null?n:He)(H);F.data=$t}else F.data=await _[I]();b?.output&&b.output&&!b.disableValidation&&(F.data=b.output.parse(F.data));for(let H of l.onSuccess)H&&await H(X(Y({},F),{response:(s=t?.hookOptions)!=null&&s.cloneResponse?_.clone():_}));return t?.throw?F.data:{data:F.data,error:null}}let Ct=(d=t?.jsonParser)!=null?d:He,xe=await _.text(),be=sr(xe)?await Ct(xe):{},jt={response:_,request:b,error:X(Y({},be),{status:_.status,statusText:_.statusText})};for(let D of l.onError)D&&await D(X(Y({},jt),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?_.clone():_}));if(t?.retry){let D=rr(t.retry),I=(c=t.retryAttempt)!=null?c:0;if(await D.shouldAttemptRetry(I,_)){for(let H of l.onRetry)H&&await H(me);let F=D.getDelay(I);return await new Promise(H=>setTimeout(H,F)),await A(e,X(Y({},t),{retryAttempt:I+1}))}}if(t?.throw)throw new ve(_.status,_.statusText,be);return{data:null,error:X(Y({},be),{status:_.status,statusText:_.statusText})}};var ot=require("better-call"),Q=require("jose");var Qe=require("@better-auth/utils/hash"),Ze=require("@better-auth/utils/base64");async function Ke(e){let t=await(0,Qe.createHash)("SHA-256").digest(e);return Ze.base64Url.encode(new Uint8Array(t),{padding:!1})}function he(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?J(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function E({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:n,claims:s,redirectURI:d,duration:a}){let c=new URL(r);if(c.searchParams.set("response_type","code"),c.searchParams.set("client_id",t.clientId),c.searchParams.set("state",o),c.searchParams.set("scope",n.join(" ")),c.searchParams.set("redirect_uri",t.redirectURI||d),i){let l=await Ke(i);c.searchParams.set("code_challenge_method","S256"),c.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((u,p)=>(u[p]=null,u),{});c.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&c.searchParams.set("duration",a),c}var Ye=require("jose");async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:n}){let s=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",r),n==="basic"){let u=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${u}`}else s.set("client_id",o.clientId),s.set("client_secret",o.clientSecret);let{data:a,error:c}=await A(i,{method:"POST",body:s,headers:d});if(c)throw c;return he(a)}async function Xe(e,t){let{data:r,error:o}=await A(t,{method:"GET",headers:{accept:"application/json","user-agent":"better-auth"}});if(o)throw o;let i=r.keys,n=JSON.parse(atob(e.split(".")[0])),s=i.find(a=>a.kid===n.kid);if(!s)throw new Error("Key not found");return await(0,Ye.jwtVerify)(e,s)}var V=require("zod"),Se=require("better-call");var br=require("@better-auth/utils/hash"),Ar=require("@noble/ciphers/chacha"),Te=require("@noble/ciphers/utils"),Rr=require("@noble/ciphers/webcrypto");var gr=require("@better-auth/utils/hash");var et=require("jose");async function tt(e,t,r=3600){return await new et.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}var hr=require("@noble/hashes/scrypt"),wr=require("uncrypto"),yr=require("@better-auth/utils/hex");var rt=require("@better-auth/utils/random"),fe=(0,rt.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function oe(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?$e(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Se.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=fe(128),i=fe(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:s});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Se.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}async function we(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=V.z.object({callbackURL:V.z.string(),codeVerifier:V.z.string(),errorURL:V.z.string().optional(),newUserURL:V.z.string().optional(),expiresAt:V.z.number(),link:V.z.object({email:V.z.string(),userId:V.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var it=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:i})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=(0,Q.decodeProtectedHeader)(r),{kid:n,alg:s}=i;if(!n||!s)return!1;let d=await kr(n),{payload:a}=await(0,Q.jwtVerify)(r,d,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(c=>{a[c]!==void 0&&(a[c]=!!a[c])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,Q.decodeJwt)(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},kr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await A(`${t}${r}`);if(!o?.keys)throw new ot.APIError("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await(0,Q.importJWK)(i,i.alg)};var nt=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}});var st=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await E({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}});var at=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:n}){let s=o||["user:email"];return e.scope&&s.push(...e.scope),E({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:r,redirectURI:n})},validateAuthorizationCode:async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await A("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=!1,{data:s}=await A("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});s&&(o.email=(s.find(a=>a.primary)??s[0])?.email,n=s.find(a=>a.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...d},data:o}}}};var Oe=["info","success","warn","error","debug"];function _r(e,t){return Oe.indexOf(t)<=Oe.indexOf(e)}var z={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Er={info:z.fg.blue,success:z.fg.green,warn:z.fg.yellow,error:z.fg.red,debug:z.fg.magenta},Ur=(e,t)=>{let r=new Date().toISOString();return`${z.dim}${r}${z.reset} ${Er[e]}${e.toUpperCase()}${z.reset} ${z.bright}[Better Auth]:${z.reset} ${t}`},vr=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(i,n,s=[])=>{if(!t||!_r(r,i))return;let d=Ur(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(d,...s):i==="warn"?console.warn(d,...s):console.log(d,...s);return}e.log(i==="success"?"info":i,d,...s)};return Object.fromEntries(Oe.map(i=>[i,(...[n,...s])=>o(i,n,s)]))},N=vr();var dt=require("jose"),ct=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw N.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new W("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new W("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let s=await E({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),s},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await A(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,dt.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});var lt=require("jose"),ut=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),E({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:s}){return k({code:i,codeVerifier:n,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=(0,lt.decodeJwt)(i.idToken),s=e.profilePhotoSize||48;await A(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),u=Buffer.from(l).toString("base64");n.picture=`data:image/jpeg;base64, ${u}`}catch(c){N.error(c&&typeof c=="object"&&"name"in c?c.name:"",c)}}});let d=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...d},data:n}}}};var pt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),E({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}});var ie={isAction:!1};var ft=require("@better-auth/utils/random"),mt=e=>(0,ft.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var gt=require("jose"),ht=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),E({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return N.error("No idToken found in token"),null;let o=(0,gt.decodeJwt)(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}});var wt=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),E({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}});var yt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:i,redirectURI:n})=>{let s=o||["account_info.read"];return e.scope&&s.push(...e.scope),await E({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:r,redirectURI:n,codeVerifier:i})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:i})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await A("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}};var bt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:i,redirectURI:n})=>{let s=i||["profile","email","openid"];return e.scope&&s.push(...e.scope),await E({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:o,redirectURI:n})},validateAuthorizationCode:async({code:o,redirectURI:i})=>await k({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:i,error:n}=await A("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...s},data:i}}}};var Ie=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Tr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Ie(`${t}/oauth/authorize`),tokenEndpoint:Ie(`${t}/oauth/token`),userinfoEndpoint:Ie(`${t}/api/v4/user`)}},At=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Tr(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:d,codeVerifier:a,redirectURI:c})=>{let l=d||["read_user"];return e.scope&&l.push(...e.scope),await E({id:i,options:e,authorizationEndpoint:t,scopes:l,state:s,redirectURI:c,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:d,codeVerifier:a})=>k({code:s,redirectURI:e.redirectURI||d,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:d,error:a}=await A(o,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||d.state!=="active"||d.locked)return null;let c=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...c},data:d}}}};var Rt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),E({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:s}=await A("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(s)throw s;return he(n)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}});var kt=e=>({id:"roblox",name:"Roblox",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["openid","profile"];return e.scope&&i.push(...e.scope),new URL(`https://apis.roblox.com/oauth/v1/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"select_account+consent"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://apis.roblox.com/oauth/v1/token",authentication:"post"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await A("https://apis.roblox.com/oauth/v1/userinfo",{headers:{authorization:`Bearer ${t.accessToken}`}});return o?null:{user:{id:r.sub,name:r.nickname||r.preferred_username||"",image:r.picture,email:"",emailVerified:!0},data:{...r}}}});var _t=require("zod"),Sr={apple:it,discord:nt,facebook:st,github:at,microsoft:ut,google:ct,spotify:pt,twitch:ht,twitter:wt,dropbox:yt,linkedin:bt,gitlab:At,reddit:Rt,roblox:kt},Pe=Object.keys(Sr),Et=_t.z.enum(Pe,{description:"OAuth2 provider to use"});var C=require("zod");var ne=require("better-call");var M=require("better-call");var Z=require("zod");function Ut(e){try{return JSON.parse(e)}catch{return null}}var m={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var vt=require("@better-auth/utils/hmac"),Tt=require("@better-auth/utils/base64"),St=require("@better-auth/utils/binary"),Ot=()=>y("/get-session",{method:"GET",query:Z.z.optional(Z.z.object({disableCookieCache:Z.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Z.z.string().transform(e=>e==="true")).optional(),disableRefresh:Z.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Ut(St.binary.decode(Tt.base64.decode(r))):null;if(o&&!await(0,vt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return B(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let p=e.context.authCookies.sessionData.name;e.setCookie(p,"",{maxAge:0})}else return e.json(l)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return B(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let s=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-s*1e3+d*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:J(e.context.sessionConfig.expiresIn,"sec")});if(!l)return B(e),e.json(null,{status:401});let u=(l.expiresAt.valueOf()-Date.now())/1e3;return await P(e,{session:l,user:n.user},!1,{maxAge:u}),e.json({session:l,user:n.user})}return await Ue(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new M.APIError("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION})}}),ee=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Ot()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},L=ue(async e=>{let t=await ee(e);if(!t?.session)throw new M.APIError("UNAUTHORIZED");return{session:t}}),Zn=ue(async e=>{let t=await ee(e);if(!t?.session)throw new M.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new M.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Or=y("/revoke-session",{method:"POST",body:Z.z.object({token:Z.z.string({description:"The token to revoke"})}),use:[L],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new M.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new M.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new M.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Ir=y("/revoke-sessions",{method:"POST",use:[L],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new M.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Pr=y("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[L],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new M.APIError("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var It=require("jose");async function G(e,t,r){return await tt({email:t.toLowerCase(),updateTo:r},e)}async function Lr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ne.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var xr=y("/send-verification-email",{method:"POST",query:C.z.object({currentURL:C.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:C.z.object({email:C.z.string({description:"The email to send the verification email to"}).email(),callbackURL:C.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ne.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ne.APIError("BAD_REQUEST",{message:m.USER_NOT_FOUND});return await Lr(e,r.user),e.json({status:!0})}),Dr=y("/verify-email",{method:"GET",query:C.z.object({token:C.z.string({description:"The token to verify the email"}),callbackURL:C.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ne.APIError("UNAUTHORIZED",{message:d})}let{token:r}=e.query,o;try{o=await(0,It.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let n=C.z.object({email:C.z.string().email(),updateTo:C.z.string().optional()}).parse(o.payload),s=await e.context.internalAdapter.findUserByEmail(n.email);if(!s)return t("user_not_found");if(n.updateTo){let d=await ee(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),c=await G(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${c}`,token:c},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let d=await ee(e);if(!d||d.user.email!==n.email){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new ne.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await P(e,{session:a,user:s.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function se(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw N.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,s=!n;if(i){let a=i.accounts.find(c=>c.providerId===r.providerId);if(a){let c=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,u])=>u!==void 0));Object.keys(c).length>0&&await e.context.internalAdapter.updateAccount(a.id,c)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Ee&&N.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(u){return N.error("Unable to link account",u),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let a=await G(e.context.secret,n.email),c=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:c,token:a},e.request)}}catch(a){return a instanceof te.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(n.id,e.request);return d?{data:{session:d,user:n},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var Cr=y("/sign-in/social",{method:"POST",query:U.z.object({currentURL:U.z.string().optional()}).optional(),body:U.z.object({callbackURL:U.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:U.z.string().optional(),errorCallbackURL:U.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Et,disableRedirect:U.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:U.z.optional(U.z.object({token:U.z.string({description:"ID token from the provider"}),nonce:U.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:U.z.string({description:"Access token from the provider"}).optional(),refreshToken:U.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:U.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new O.APIError("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new O.APIError("NOT_FOUND",{message:m.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(n,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:m.INVALID_TOKEN});let a=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:m.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:m.USER_EMAIL_NOT_FOUND});let c=await se(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(c.error)throw new O.APIError("UNAUTHORIZED",{message:c.error});return await P(e,c.data),e.json({token:c.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await oe(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),jr=y("/sign-in/email",{method:"POST",body:U.z.object({email:U.z.string({description:"Email of the user"}),password:U.z.string({description:"Password of the user"}),callbackURL:U.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:U.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new O.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!U.z.string().email().safeParse(t).success)throw new O.APIError("BAD_REQUEST",{message:m.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(c=>c.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let s=n?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:r}))throw e.context.logger.error("Invalid password"),new O.APIError("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new O.APIError("UNAUTHORIZED",{message:m.EMAIL_NOT_VERIFIED});let c=await G(e.context.secret,i.user.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:l,token:c},e.request),new O.APIError("FORBIDDEN",{message:m.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new O.APIError("UNAUTHORIZED",{message:m.FAILED_TO_CREATE_SESSION});return await P(e,{session:a,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},token:a.token,redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var ae=require("zod");var ye=ae.z.object({code:ae.z.string().optional(),error:ae.z.string().optional(),error_description:ae.z.string().optional(),state:ae.z.string().optional()}),$r=y("/callback/:id",{method:["GET","POST"],body:ye.optional(),query:ye.optional(),metadata:ie},async e=>{let t;try{if(e.method==="GET")t=ye.parse(e.query);else if(e.method==="POST")t=ye.parse(e.body);else throw new Error("Unsupported method")}catch(R){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",R),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let s=e.context.socialProviders.find(R=>R.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:a,link:c,errorURL:l,newUserURL:u}=await we(e),p;try{p=await s.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(R){throw e.context.logger.error("",R),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let f=await s.getUserInfo(p).then(R=>R?.user);function g(R){let b=l||a||`${e.context.baseURL}/error`;throw b.includes("?")?b=`${b}&error=${R}`:b=`${b}?error=${R}`,e.redirect(b)}if(!f)return e.context.logger.error("Unable to get user info"),g("unable_to_get_user_info");if(!f.email&&s.id!=="roblox")return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),g("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(c){if(c.email!==f?.email?.toLowerCase()&&s.id!=="roblox")return g("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:c.userId,providerId:s.id,accountId:f.id,accessToken:p.accessToken,refreshToken:p.refreshToken,accessTokenExpiresAt:p.accessTokenExpiresAt,scope:p.scopes?.join(","),image:f.image}))return g("unable_to_link_account");let b;try{b=a.toString()}catch{b=a}throw e.redirect(b)}let T=await se(e,{userInfo:{...f,email:f.email||"",name:f.name||f.email||""},account:{providerId:s.id,accountId:f.id,...p,image:f.image,scope:p.scopes?.join(",")},callbackURL:a});if(T.error)return e.context.logger.error(T.error.split(" ").join("_")),g(T.error.split(" ").join("_"));let{session:re,user:j}=T.data;await P(e,{session:re,user:j});let q;try{q=(T.isRegister&&u||a).toString()}catch{q=T.isRegister&&u||a}throw e.redirect(q)});var ks=require("zod");var Pt=require("better-call");var Nr=y("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw B(e),new Pt.APIError("BAD_REQUEST",{message:m.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),B(e),e.json({success:!0})});var x=require("zod");var de=require("better-call");function Lt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}function Br(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}var Vr=y("/forget-password",{method:"POST",body:x.z.object({email:x.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:x.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new de.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=J(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),s=mt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:n});let d=`${e.context.baseURL}/reset-password/${s}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:s},e.request),e.json({status:!0})}),zr=y("/reset-password/:token",{method:"GET",query:x.z.object({callbackURL:x.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Lt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(Lt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Br(e.context,r,{token:t}))}),Mr=y("/reset-password",{query:x.z.optional(x.z.object({token:x.z.string().optional(),currentURL:x.z.string().optional()})),method:"POST",body:x.z.object({newPassword:x.z.string({description:"The new password to set"}),token:x.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new de.APIError("BAD_REQUEST",{message:m.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new de.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});if(r.length>i)throw new de.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(n);if(!s||s.expiresAt<new Date)throw new de.APIError("BAD_REQUEST",{message:m.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let d=s.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(u=>u.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:a,accountId:d}),e.json({status:!0}))});var S=require("zod");var v=require("better-call");var h=require("zod"),qr=require("better-call"),xs=h.z.object({id:h.z.string(),providerId:h.z.string(),accountId:h.z.string(),userId:h.z.string(),accessToken:h.z.string().nullish(),refreshToken:h.z.string().nullish(),idToken:h.z.string().nullish(),accessTokenExpiresAt:h.z.date().nullish(),refreshTokenExpiresAt:h.z.date().nullish(),scope:h.z.string().nullish(),password:h.z.string().nullish(),image:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),Ds=h.z.object({id:h.z.string(),email:h.z.string().transform(e=>e.toLowerCase()),emailVerified:h.z.boolean().default(!1),name:h.z.string(),image:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),Cs=h.z.object({id:h.z.string(),userId:h.z.string(),expiresAt:h.z.date(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),token:h.z.string(),ipAddress:h.z.string().nullish(),userAgent:h.z.string().nullish()}),js=h.z.object({id:h.z.string(),value:h.z.string(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),expiresAt:h.z.date(),identifier:h.z.string()});var Hr=y("/change-password",{method:"POST",body:S.z.object({newPassword:S.z.string({description:"The new password to set"}),currentPassword:S.z.string({description:"The current password"}),revokeOtherSessions:S.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[L],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new v.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new v.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(i.user.id)).find(p=>p.providerId==="credential"&&p.password);if(!a||!a.password)throw new v.APIError("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});let c=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new v.APIError("BAD_REQUEST",{message:m.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:c});let u=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let p=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!p)throw new v.APIError("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION});await P(e,{session:p,user:i.user}),u=p.token}return e.json({token:u})}),Gr=y("/set-password",{method:"POST",body:S.z.object({newPassword:S.z.string()}),metadata:{SERVER_ONLY:!0},use:[L]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new v.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new v.APIError("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),d=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new v.APIError("BAD_REQUEST",{message:"user already has a password"})}),Wr=y("/delete-user",{method:"POST",use:[L],body:S.z.object({callbackURL:S.z.string().optional(),password:S.z.string().optional(),token:S.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new v.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!n||!n.password)throw new v.APIError("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new v.APIError("BAD_REQUEST",{message:m.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new v.APIError("BAD_REQUEST",{message:m.SESSION_EXPIRED})}if(e.body.token)return await xt({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=fe(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),B(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),xt=y("/delete-user/callback",{method:"GET",query:S.z.object({token:S.z.string(),callbackURL:S.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new v.APIError("NOT_FOUND");let t=await ee(e);if(!t)throw new v.APIError("NOT_FOUND",{message:m.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new v.APIError("NOT_FOUND",{message:m.INVALID_TOKEN});if(r.value!==t.user.id)throw new v.APIError("NOT_FOUND",{message:m.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),B(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Jr=y("/change-email",{method:"POST",query:S.z.object({currentURL:S.z.string().optional()}).optional(),body:S.z.object({newEmail:S.z.string({description:"The new email to set"}).email(),callbackURL:S.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[L],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new v.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new v.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new v.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new v.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Qr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,Zr=y("/error",{method:"GET",metadata:{...ie,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Qr(t),{headers:{"Content-Type":"text/html"}})});var Kr=y("/ok",{method:"GET",metadata:{...ie,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Yr=require("zod");var Xr=require("better-call");var ce=require("zod");var Le=require("better-call");var eo=y("/list-accounts",{method:"GET",use:[L],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,accountId:o.accountId,provider:o.providerId})))}),to=y("/link-social",{method:"POST",requireHeaders:!0,query:ce.z.object({currentURL:ce.z.string().optional()}).optional(),body:ce.z.object({callbackURL:ce.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:ce.z.enum(Pe,{description:"The OAuth2 provider to use"})}),use:[L],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new Le.APIError("BAD_REQUEST",{message:m.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Le.APIError("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});let n=await oe(e,{userId:t.user.id,email:t.user.email}),s=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:s.toString(),redirect:!0})});var Ja=require("defu");var te=require("better-call");var Dt=require("jose");var ro=e=>({id:"sso",endpoints:{createOIDCProvider:y("/sso/register",{method:"POST",body:w.z.object({providerId:w.z.string({description:"The ID of the provider. This is used to identify the provider during login and callback"}),issuer:w.z.string({description:"The issuer url of the provider (e.g. https://idp.example.com)"}),domain:w.z.string({description:"The domain of the provider. This is used for email matching"}),clientId:w.z.string({description:"The client ID"}),clientSecret:w.z.string({description:"The client secret"}),authorizationEndpoint:w.z.string({description:"The authorization endpoint"}).optional(),tokenEndpoint:w.z.string({description:"The token endpoint"}).optional(),userInfoEndpoint:w.z.string({description:"The user info endpoint"}).optional(),tokenEndpointAuthentication:w.z.enum(["client_secret_post","client_secret_basic"]).optional(),jwksEndpoint:w.z.string({description:"The JWKS endpoint"}).optional(),discoveryEndpoint:w.z.string().optional(),scopes:w.z.array(w.z.string(),{description:"The scopes to request. Defaults to ['openid', 'email', 'profile', 'offline_access']"}).optional(),pkce:w.z.boolean({description:"Whether to use PKCE for the authorization flow"}).default(!0).optional(),mapping:w.z.object({id:w.z.string({description:"The field in the user info response that contains the id. Defaults to 'sub'"}),email:w.z.string({description:"The field in the user info response that contains the email. Defaults to 'email'"}),emailVerified:w.z.string({description:"The field in the user info response that contains whether the email is verified. defaults to 'email_verified'"}).optional(),name:w.z.string({description:"The field in the user info response that contains the name. Defaults to 'name'"}),image:w.z.string({description:"The field in the user info response that contains the image. Defaults to 'picture'"}).optional(),extraFields:w.z.record(w.z.string()).optional()}).optional(),organizationId:w.z.string({description:"If organization plugin is enabled, the organization id to link the provider to"}).optional()}),use:[L],metadata:{openapi:{summary:"Register an OIDC provider",description:"This endpoint is used to register an OIDC provider. This is used to configure the provider and link it to an organization",responses:{200:{description:"The created provider"}}}}},async t=>{let r=t.body;if(w.z.string().url().safeParse(r.issuer).error)throw new te.APIError("BAD_REQUEST",{message:"Invalid issuer. Must be a valid URL"});let i=await t.context.adapter.create({model:"ssoProvider",data:{issuer:r.issuer,domain:r.domain,oidcConfig:JSON.stringify({issuer:r.issuer,clientId:r.clientId,clientSecret:r.clientSecret,authorizationEndpoint:r.authorizationEndpoint,tokenEndpoint:r.tokenEndpoint,tokenEndpointAuthentication:r.tokenEndpointAuthentication,jwksEndpoint:r.jwksEndpoint,pkce:r.pkce,discoveryEndpoint:r.discoveryEndpoint||`${r.issuer}/.well-known/openid-configuration`,mapping:r.mapping,scopes:r.scopes,userinfoEndpoint:r.userInfoEndpoint}),organizationId:r.organizationId,userId:t.context.session.user.id,providerId:r.providerId}});return t.json({...i,oidcConfig:JSON.parse(i.oidcConfig),redirectURI:`${t.context.baseURL}/sso/callback/${i.providerId}`})}),signInSSO:y("/sign-in/sso",{method:"POST",body:w.z.object({email:w.z.string({description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"}).optional(),organizationSlug:w.z.string({description:"The slug of the organization to sign in with"}).optional(),domain:w.z.string({description:"The domain of the provider."}).optional(),callbackURL:w.z.string({description:"The URL to redirect to after login"}),errorCallbackURL:w.z.string({description:"The URL to redirect to after login"}).optional(),newUserCallbackURL:w.z.string({description:"The URL to redirect to after login if the user is new"}).optional()}),metadata:{openapi:{summary:"Sign in with SSO provider",description:"This endpoint is used to sign in with an SSO provider. It redirects to the provider's authorization URL",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"},issuer:{type:"string",description:"The issuer identifier, this is the URL of the provider and can be used to verify the provider and identify the provider during login. It's optional if the email is provided"},providerId:{type:"string",description:"The ID of the provider to sign in with. This can be provided instead of email or issuer"},callbackURL:{type:"string",description:"The URL to redirect to after login"},errorCallbackURL:{type:"string",description:"The URL to redirect to after login"},newUserCallbackURL:{type:"string",description:"The URL to redirect to after login if the user is new"}},required:["callbackURL"]}}}}}}},async t=>{let r=t.body,{email:o,organizationSlug:i,domain:n}=r;if(!o&&!i&&!n)throw new te.APIError("BAD_REQUEST",{message:"email, organizationSlug or domain is required"});n=r.domain||o?.split("@")[1];let s="";i&&(s=await t.context.adapter.findOne({model:"organization",where:[{field:"slug",value:i}]}).then(u=>u?u.id:""));let d=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:s?"organizationId":"domain",value:s||n}]}).then(u=>u?{...u,oidcConfig:JSON.parse(u.oidcConfig)}:null);if(!d)throw new te.APIError("NOT_FOUND",{message:"No provider found for the issuer"});let a=await oe(t),c=`${t.context.baseURL}/sso/callback/${d.providerId}`,l=await E({id:d.issuer,options:{clientId:d.oidcConfig.clientId,clientSecret:d.oidcConfig.clientSecret},redirectURI:c,state:a.state,codeVerifier:d.oidcConfig.pkce?a.codeVerifier:void 0,scopes:["openid","email","profile","offline_access"],authorizationEndpoint:d.oidcConfig.authorizationEndpoint});return t.json({url:l.toString(),redirect:!0})}),callbackSSO:y("/sso/callback/:providerId",{method:"GET",query:w.z.object({code:w.z.string().optional(),state:w.z.string(),error:w.z.string().optional(),error_description:w.z.string().optional()}),metadata:{isAction:!1,openapi:{summary:"Callback URL for SSO provider",description:"This endpoint is used as the callback URL for SSO providers. It handles the authorization code and exchanges it for an access token",responses:{302:{description:"Redirects to the callback URL"}}}}},async t=>{let{code:r,state:o,error:i,error_description:n}=t.query,s=await we(t);if(!s)throw t.redirect(`${t.context.baseURL}/error?error=invalid_state`);let{callbackURL:d,errorURL:a,newUserURL:c}=s;if(!r||i)throw t.redirect(`${a||d}?error=${i}&error_description=${n}`);let l=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:"providerId",value:t.params.providerId}]}).then(R=>R?{...R,oidcConfig:JSON.parse(R.oidcConfig)}:null);if(!l)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=provider not found`);let u=l.oidcConfig,p=await A(l.oidcConfig.discoveryEndpoint);if(p.data&&(u={tokenEndpoint:p.data.token_endpoint,tokenEndpointAuthentication:p.data.token_endpoint_auth_method,userInfoEndpoint:p.data.userinfo_endpoint,scopes:["openid","email","profile","offline_access"],...l.oidcConfig}),!u.tokenEndpoint)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=token_endpoint_not_found`);let f=await k({code:r,codeVerifier:l.oidcConfig.pkce?s.codeVerifier:void 0,redirectURI:`${t.context.baseURL}/sso/callback/${l.providerId}`,options:{clientId:l.oidcConfig.clientId,clientSecret:l.oidcConfig.clientSecret},tokenEndpoint:u.tokenEndpoint,authentication:u.tokenEndpointAuthentication==="client_secret_post"?"post":"basic"}).catch(R=>{if(R instanceof ve)throw t.redirect(`${a||d}?error=invalid_provider&error_description=${R.message}`);return null});if(!f)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=token_response_not_found`);let g=null;if(f.idToken){let R=(0,Dt.decodeJwt)(f.idToken);if(!u.jwksEndpoint)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=jwks_endpoint_not_found`);let b=await Xe(f.idToken,u.jwksEndpoint).catch(_=>(t.context.logger.error(_),null));if(!b)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=token_not_verified`);if(b.payload.iss!==l.issuer)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=issuer_mismatch`);let $=u.mapping||{};g={...Object.fromEntries(Object.entries($.extraFields||{}).map(([_,me])=>[_,b.payload[me]])),id:R[$.id||"sub"],email:R[$.email||"email"],emailVerified:R[$.emailVerified||"email_verified"],name:R[$.name||"name"],image:R[$.image||"picture"]}}if(!g){if(!u.userInfoEndpoint)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=user_info_endpoint_not_found`);let R=await A(u.userInfoEndpoint,{headers:{Authorization:`Bearer ${f.accessToken}`}});if(R.error)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=${R.error.message}`);g=R.data}if(!g.email||!g.id)throw t.redirect(`${a||d}/error?error=invalid_provider&error_description=missing_user_info`);let T=await se(t,{userInfo:{email:g.email,name:g.name||g.email,id:g.id,image:g.image,emailVerified:g.emailVerified||!1},account:{idToken:f.idToken,accessToken:f.accessToken,refreshToken:f.refreshToken,accountId:g.id,providerId:l.providerId,accessTokenExpiresAt:f.accessTokenExpiresAt,refreshTokenExpiresAt:f.refreshTokenExpiresAt,scope:f.scopes?.join(",")}});if(T.error)throw t.redirect(`${a||d}/error?error=${T.error}`);let{session:re,user:j}=T.data;if(e?.provisionUser&&await e.provisionUser({user:j,userInfo:g,token:f,provider:l}),l.organizationId&&!e?.organizationProvisioning?.disabled&&t.context.options.plugins?.find(b=>b.id==="organization")&&!await t.context.adapter.findOne({model:"member",where:[{field:"organizationId",value:l.organizationId},{field:"userId",value:j.id}]})){let $=e?.organizationProvisioning?.getRole?await e.organizationProvisioning.getRole({user:j,userInfo:g,token:f,provider:l}):e?.organizationProvisioning?.defaultRole||"member";await t.context.adapter.create({model:"member",data:{organizationId:l.organizationId,userId:j.id,role:$,createdAt:new Date,updatedAt:new Date}})}await P(t,{session:re,user:j});let q;try{q=new URL(d).toString()}catch{q=d}throw t.redirect(q)})},schema:{ssoProvider:{fields:{issuer:{type:"string",required:!0},oidcConfig:{type:"string",required:!1},samlConfig:{type:"string",required:!1},userId:{type:"string",references:{model:"user",field:"id"}},providerId:{type:"string",required:!0,unique:!0},organizationId:{type:"string",required:!1},domain:{type:"string",required:!0}}}}});0&&(module.exports={sso});
